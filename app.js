class BallThrowJourneyApp {
    constructor() {
        console.log('üöÄ BallThrowJourneyApp initializing...');
        
        // Core elements
        this.map = null;
        this.mapElement = document.getElementById('map');
        this.ballElement = document.getElementById('ball');
        this.compassNeedle = document.getElementById('compassNeedle');
        this.gameCanvas = document.getElementById('gameCanvas');
        this.ctx = null;
        
        // Canvas and image data
        this.aerialImages = [];
        this.ballImage = null;
        this.canvasWidth = 0;
        this.canvasHeight = 0;
        this.ballCanvasX = 0;
        this.ballCanvasY = 0;
        this.backgroundOffsetY = 0;
        
        // Audio elements
        this.sounds = {
            start: new Audio('start.mp3'),
            kick: new Audio('kick.mp3'),
            goal: new Audio('goal.mp3')
        };
        
        // Preload audio files
        Object.values(this.sounds).forEach(audio => {
            audio.preload = 'auto';
            audio.volume = 0.8;
            audio.addEventListener('canplaythrough', () => {
                console.log(`‚úÖ Audio ${audio.src} loaded successfully`);
            });
            audio.addEventListener('error', (e) => {
                console.error(`‚ùå Audio ${audio.src} failed to load:`, e);
            });
        });
        
        // State management
        this.isActive = false;
        this.isCountdownActive = false;
        this.isPermissionGranted = false;
        this.isMapReady = false;
        this.isMapFullyLoaded = false;
        this.isBallMoving = false;
        this.isDetectingShake = false;
        
        // Position data
        this.currentPosition = { lat: 35.4476, lng: 139.6425 };
        this.startPosition = { ...this.currentPosition };
        this.ballPosition = { ...this.currentPosition };
        
        // Sensor data
        this.heading = 0;
        this.absoluteHeading = 0;
        this.tilt = 0;
        this.lastTilt = 0;
        this.tiltSpeed = 0;
        this.lastTime = Date.now();
        
        // Shake detection
        this.accelerationData = [];
        this.maxAcceleration = 0;
        this.shakeThreshold = 8;
        this.totalDistance = 0;
        
        // Animation
        this.animationFrame = 0;
        this.throwPower = 0;
        this.throwAngle = 0;
        this.ballTrailPoints = [];
        
        // Preparation state
        this.isAudioReady = false;
        this.isAerialImagesReady = false;
        this.isBallImageReady = false;
        this.preparationOverlay = null;
        
        // Timers
        this.countdownTimer = null;
        this.countdownElement = null;
        this.preparationTimer = null;
        
        this.updateStatus('‰ΩçÁΩÆÊÉÖÂ†±„Å®„Éá„Éê„Ç§„Çπ„Çª„É≥„Çµ„Éº„ÅÆË®±ÂèØ„ÅåÂøÖË¶Å„Åß„Åô');

        // „ÄêËøΩÂä†„Äë„Éá„Éê„ÉÉ„Ç∞Ë°®Á§∫Ë¶ÅÁ¥†„Çí‰ΩúÊàê
        this.createDebugDisplay();
        console.log('‚úÖ BallThrowJourneyApp initialized');
    }

    // „ÄêÂº∑ÂåñÁâà„Äë„Éá„Éê„ÉÉ„Ç∞Ë°®Á§∫„Çí‰ΩúÊàê
createDebugDisplay() {
    this.debugElement = document.createElement('div');
    this.debugElement.id = 'debugDisplay';
    this.debugElement.style.cssText = `
        position: fixed;
        top: 50px;
        left: 10px;
        right: 10px;
        background: rgba(0, 0, 0, 0.9);
        color: white;
        padding: 15px;
        border-radius: 8px;
        font-family: monospace;
        font-size: 11px;
        z-index: 10000;
        max-height: 300px;
        overflow-y: auto;
        white-space: pre-wrap;
        display: block;
        border: 2px solid #00ff00;
    `;
    document.body.appendChild(this.debugElement);
    
    // „Éá„Éê„ÉÉ„Ç∞Ë°®Á§∫„ÅÆÂàá„ÇäÊõø„Åà„Éú„Çø„É≥
    this.debugToggle = document.createElement('button');
    this.debugToggle.textContent = 'DEBUG';
    this.debugToggle.style.cssText = `
        position: fixed;
        top: 10px;
        right: 10px;
        background: #ff4444;
        color: white;
        border: none;
        padding: 8px 12px;
        border-radius: 4px;
        font-size: 12px;
        z-index: 10001;
        font-weight: bold;
    `;
    this.debugToggle.onclick = () => this.toggleDebug();
    document.body.appendChild(this.debugToggle);
    
    // „ÇØ„É™„Ç¢„Éú„Çø„É≥
    this.debugClear = document.createElement('button');
    this.debugClear.textContent = 'CLEAR';
    this.debugClear.style.cssText = `
        position: fixed;
        top: 10px;
        right: 70px;
        background: #4444ff;
        color: white;
        border: none;
        padding: 8px 12px;
        border-radius: 4px;
        font-size: 12px;
        z-index: 10001;
        font-weight: bold;
    `;
    this.debugClear.onclick = () => this.clearDebug();
    document.body.appendChild(this.debugClear);

    this.debugVisible = true;
    this.showDebug('üöÄ „Çπ„Éû„ÉõÂØæÂøú„Éá„Éê„ÉÉ„Ç∞„Ç∑„Çπ„ÉÜ„É†ÈñãÂßã');
}


/// „ÄêÂº∑ÂåñÁâà„Äë„Éá„Éê„ÉÉ„Ç∞„É°„ÉÉ„Çª„Éº„Ç∏Ë°®Á§∫
showDebug(message) {
    if (this.debugElement) {
        const timestamp = new Date().toLocaleTimeString();
        const newMessage = `[${timestamp}] ${message}`;
        
        // Êó¢Â≠ò„ÅÆ„É°„ÉÉ„Çª„Éº„Ç∏„Å´ËøΩÂä†ÔºàÊúÄÊñ∞„Çí‰∏ä„Å´Ôºâ
        this.debugElement.textContent = newMessage + '\n' + this.debugElement.textContent;
        
        // 20Ë°å„ÇíË∂Ö„Åà„Åü„ÇâÂè§„ÅÑ„É°„ÉÉ„Çª„Éº„Ç∏„ÇíÂâäÈô§
        const lines = this.debugElement.textContent.split('\n');
        if (lines.length > 20) {
            this.debugElement.textContent = lines.slice(0, 20).join('\n');
        }
        
        // Ëá™Âãï„Çπ„ÇØ„É≠„Éº„É´ÔºàÊúÄÊñ∞„É°„ÉÉ„Çª„Éº„Ç∏„ÅåË¶ã„Åà„Çã„Çà„ÅÜ„Å´Ôºâ
        this.debugElement.scrollTop = 0;
    }
    
    // „Ç≥„É≥„ÇΩ„Éº„É´„Å´„ÇÇÂá∫ÂäõÔºàPCÁî®Ôºâ
    console.log(message);
}

    
// „Éá„Éê„ÉÉ„Ç∞Ë°®Á§∫Âàá„ÇäÊõø„Åà
toggleDebug() {
    this.debugVisible = !this.debugVisible;
    this.debugElement.style.display = this.debugVisible ? 'block' : 'none';
    this.debugToggle.style.background = this.debugVisible ? '#ff4444' : '#888888';
    console.log('DebugË°®Á§∫Âàá„ÇäÊõø„Åà:', this.debugVisible);
}

// „Éá„Éê„ÉÉ„Ç∞„ÇØ„É™„Ç¢
clearDebug() {
    if (this.debugElement) {
        this.debugElement.textContent = '';
        this.showDebug('üßπ „Éá„Éê„ÉÉ„Ç∞„É≠„Ç∞„ÇØ„É™„Ç¢');
        console.log('Debug log cleared');
    }
}

// Ëà™Á©∫ÂÜôÁúü„ÅÆË©≥Á¥∞Áä∂ÊÖã„Çí„Éá„Éê„ÉÉ„Ç∞Ë°®Á§∫
debugAerialImageState() {
    if (this.aerialImages.length > 0 && this.aerialImages[0].image) {
        const img = this.aerialImages[0].image;
        this.showDebug(`üì∏ Ëà™Á©∫ÂÜôÁúüÁä∂ÊÖã:`);
        this.showDebug(`  - complete: ${img.complete}`);
        this.showDebug(`  - naturalWidth: ${img.naturalWidth}`);
        this.showDebug(`  - naturalHeight: ${img.naturalHeight}`);
        this.showDebug(`  - width: ${img.width}`);
        this.showDebug(`  - height: ${img.height}`);
        this.showDebug(`  - srcÂÖàÈ†≠: ${img.src.substring(0, 60)}...`);
    } else {
        this.showDebug('‚ùå Ëà™Á©∫ÂÜôÁúü„ÅåÂ≠òÂú®„Åó„Å™„ÅÑ');
    }
}


// „Ç≠„É£„É≥„Éê„ÇπÁä∂ÊÖã„Çí„Éá„Éê„ÉÉ„Ç∞Ë°®Á§∫
debugCanvasState() {
    this.showDebug(`üñºÔ∏è „Ç≠„É£„É≥„Éê„ÇπÁä∂ÊÖã:`);
    this.showDebug(`  - canvasWidth: ${this.canvasWidth}`);
    this.showDebug(`  - canvasHeight: ${this.canvasHeight}`);
    this.showDebug(`  - ctxÂ≠òÂú®: ${!!this.ctx}`);
    this.showDebug(`  - gameCanvasÂ≠òÂú®: ${!!this.gameCanvas}`);
    if (this.gameCanvas) {
        this.showDebug(`  - canvasË°®Á§∫: ${this.gameCanvas.style.display}`);
    }
}

// „Ç®„É©„ÉºË©≥Á¥∞Ë°®Á§∫
showDetailedError(context, error) {
    this.showDebug(`‚ùå ${context}„Åß„Ç®„É©„ÉºÁô∫Áîü:`);
    this.showDebug(`  - „É°„ÉÉ„Çª„Éº„Ç∏: ${error.message}`);
    if (error.stack) {
        const stackLines = error.stack.split('\n').slice(0, 3); // ÊúÄÂàù„ÅÆ3Ë°å„ÅÆ„Åø
        stackLines.forEach(line => {
            this.showDebug(`  - ${line.trim()}`);
        });
    }
    console.error(`${context}„Ç®„É©„Éº:`, error);
}



    // 2ÁÇπÈñì„ÅÆË∑ùÈõ¢„ÇíË®àÁÆóÔºà„É°„Éº„Éà„É´Âçò‰ΩçÔºâ
    calculateDistance(lat1, lng1, lat2, lng2) {
        const R = 6371000; // Âú∞ÁêÉ„ÅÆÂçäÂæÑÔºà„É°„Éº„Éà„É´Ôºâ
        const dLat = (lat2 - lat1) * Math.PI / 180;
        const dLng = (lng2 - lng1) * Math.PI / 180;
        const a = Math.sin(dLat/2) * Math.sin(dLat/2) +
                 Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *
                 Math.sin(dLng/2) * Math.sin(dLng/2);
        const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
        return R * c;
    }
    
    async startApp() {
        const startBtn = document.getElementById('startBtn');
        if (!startBtn) return;
        
        console.log('üöÄ Starting app...');
        startBtn.disabled = true;
        startBtn.textContent = 'ÂàùÊúüÂåñ‰∏≠...';
        
        try {
            // Get location
            this.updateStatus('üìç ‰ΩçÁΩÆÊÉÖÂ†±„ÇíÂèñÂæó‰∏≠...');
            await this.getCurrentPosition();
            
            // Initialize map
            this.updateStatus('üó∫Ô∏è Âú∞Âõ≥„ÇíÊ∫ñÂÇô‰∏≠...');
            await this.initMap();
            
            // Request sensor permissions
            this.updateStatus('üì± „Çª„É≥„Çµ„ÉºË®±ÂèØ„ÇíÂèñÂæó‰∏≠...');
            await this.requestSensorPermission();
            
            this.setupComplete();
            
        } catch (error) {
            console.error('‚ùå Setup error:', error);
            this.showError('ÂàùÊúüÂåñ„Ç®„É©„Éº: ' + error.message);
            this.fallbackSetup();
        }
    }
    
    getCurrentPosition() {
        return new Promise((resolve, reject) => {
            if (!navigator.geolocation) {
                console.warn('‚ö†Ô∏è Geolocation not supported');
                resolve();
                return;
            }
            
            const options = {
                enableHighAccuracy: true,
                timeout: 15000,
                maximumAge: 60000
            };
            
            navigator.geolocation.getCurrentPosition(
                (position) => {
                    this.currentPosition = {
                        lat: position.coords.latitude,
                        lng: position.coords.longitude
                    };
                    this.startPosition = { ...this.currentPosition };
                    this.ballPosition = { ...this.currentPosition };
                    console.log('‚úÖ Position obtained:', this.currentPosition);
                    resolve();
                },
                (error) => {
                    console.warn('‚ö†Ô∏è Geolocation failed:', error.message);
                    resolve();
                },
                options
            );
        });
    }
    
    async initMap() {
        document.getElementById('loading').style.display = 'block';
        
        try {
            if (!window.google) {
                await this.loadGoogleMapsAPI();
            }
            
            this.map = new google.maps.Map(this.mapElement, {
                center: this.currentPosition,
                zoom: 20,
                mapTypeId: google.maps.MapTypeId.SATELLITE,
                disableDefaultUI: true,
                gestureHandling: 'none',
                heading: 0,
                tilt: 0,
                styles: [
                    {
                        featureType: 'all',
                        elementType: 'labels',
                        stylers: [{ visibility: 'off' }]
                    }
                ]
            });
            
            google.maps.event.addListenerOnce(this.map, 'idle', () => {
                console.log('‚úÖ Map is ready');
                this.isMapReady = true;
                
                setTimeout(() => {
                    this.isMapFullyLoaded = true;
                    console.log('‚úÖ Map fully loaded');
                }, 2000);
            });
            
        } catch (error) {
            console.error('‚ùå Map initialization failed:', error);
            throw error;
        }
        
        document.getElementById('loading').style.display = 'none';
    }
    
    loadGoogleMapsAPI() {
        return new Promise((resolve, reject) => {
            const script = document.createElement('script');
            script.src = `https://maps.googleapis.com/maps/api/js?key=AIzaSyDbZWtPobAYr04A8da3OUOjtNNdjfvkbXA&libraries=geometry`;
            script.async = true;
            script.defer = true;
            
            script.onload = () => {
                console.log('‚úÖ Google Maps API loaded');
                resolve();
            };
            
            script.onerror = () => {
                console.error('‚ùå Failed to load Google Maps API');
                reject(new Error('Google Maps API loading failed'));
            };
            
            document.head.appendChild(script);
        });
    }
    
    async requestSensorPermission() {
        try {
            // iOS 13+ device orientation permission
            if (typeof DeviceOrientationEvent !== 'undefined' && 
                typeof DeviceOrientationEvent.requestPermission === 'function') {
                
                const orientationPermission = await DeviceOrientationEvent.requestPermission();
                if (orientationPermission !== 'granted') {
                    throw new Error('„Éá„Éê„Ç§„ÇπÊñπÂêë„Çª„É≥„Çµ„Éº„ÅÆË®±ÂèØ„ÅåÂøÖË¶Å„Åß„Åô');
                }
            }
            
            // iOS 13+ device motion permission
            if (typeof DeviceMotionEvent !== 'undefined' && 
                typeof DeviceMotionEvent.requestPermission === 'function') {
                
                const motionPermission = await DeviceMotionEvent.requestPermission();
                if (motionPermission !== 'granted') {
                    throw new Error('„Éá„Éê„Ç§„Çπ„É¢„Éº„Ç∑„Éß„É≥„Çª„É≥„Çµ„Éº„ÅÆË®±ÂèØ„ÅåÂøÖË¶Å„Åß„Åô');
                }
            }
            
            this.startSensors();
            
        } catch (error) {
            console.warn('‚ö†Ô∏è Sensor permission failed:', error);
            this.startSensors();
        }
    }
    
    startSensors() {
        // Device orientation
        if (typeof DeviceOrientationEvent !== 'undefined') {
            window.addEventListener('deviceorientation', (event) => {
                this.handleOrientation(event);
            }, { passive: true });
            
            window.addEventListener('deviceorientationabsolute', (event) => {
                this.handleAbsoluteOrientation(event);
            }, { passive: true });
        }
        
        // Device motion for shake detection
        if (typeof DeviceMotionEvent !== 'undefined') {
            window.addEventListener('devicemotion', (event) => {
                this.handleMotion(event);
            }, { passive: true });
        } else {
            this.setupFallbackShakeDetection();
        }
        
        this.isPermissionGranted = true;
    }
    
    handleOrientation(event) {
        if (!this.isPermissionGranted) return;
        
        let newHeading = 0;
        
        // iOS
        if (event.webkitCompassHeading !== undefined) {
            newHeading = event.webkitCompassHeading;
        }
        // Android
        else if (event.alpha !== null) {
            newHeading = 360 - event.alpha;
            if (newHeading >= 360) newHeading -= 360;
            if (newHeading < 0) newHeading += 360;
        }
        
        this.heading = newHeading;
        
        const newTilt = event.beta || 0;
        const currentTime = Date.now();
        const deltaTime = Math.max((currentTime - this.lastTime) / 1000, 0.001);
        const deltaTilt = newTilt - this.lastTilt;
        this.tiltSpeed = Math.abs(deltaTilt) / deltaTime;
        
        this.tilt = newTilt;
        this.lastTilt = newTilt;
        this.lastTime = currentTime;
        
        this.updateDisplay();
    }
    
    handleAbsoluteOrientation(event) {
        if (event.absolute && event.alpha !== null) {
            this.absoluteHeading = event.alpha;
            this.heading = 360 - this.absoluteHeading;
            if (this.heading >= 360) this.heading -= 360;
            if (this.heading < 0) this.heading += 360;
        }
    }
    
    handleMotion(event) {
    if (!this.isDetectingShake) return;
    
    const acceleration = event.acceleration || event.accelerationIncludingGravity;
    if (!acceleration) return;
    
    // „Äê‰øÆÊ≠£„Äë„Çà„ÇäÊ≠£Á¢∫„Å™Âä†ÈÄüÂ∫¶Ë®àÁÆóÔºàÈáçÂäõ„ÇíÈô§ÂéªÔºâ
    let totalAcceleration;
    if (event.acceleration) {
        // ÈáçÂäõÈô§ÂéªÊ∏à„Åø„ÅÆÂä†ÈÄüÂ∫¶„Éá„Éº„Çø„Åå„ÅÇ„ÇãÂ†¥Âêà
        totalAcceleration = Math.sqrt(
            Math.pow(acceleration.x || 0, 2) + 
            Math.pow(acceleration.y || 0, 2) + 
            Math.pow(acceleration.z || 0, 2)
        );
    } else {
        // ÈáçÂäõËæº„Åø„Éá„Éº„Çø„Åã„ÇâÊé®ÂÆöÈáçÂäõ„ÇíÂ∑Æ„ÅóÂºï„Åè
        const x = acceleration.x || 0;
        const y = acceleration.y || 0;
        const z = acceleration.z || 0;
        
        // ÈáçÂäõ„ÅÆÂΩ±Èüø„ÇíÊ∏õ„Çâ„ÅôÔºàÈÄöÂ∏∏ÈáçÂäõ„ÅØÁ¥Ñ9.8Ôºâ
        const gravityCompensatedZ = Math.abs(z) > 9 ? z - Math.sign(z) * 9.8 : z;
        
        totalAcceleration = Math.sqrt(x * x + y * y + gravityCompensatedZ * gravityCompensatedZ);
    }
    
    const currentTime = Date.now();
    this.accelerationData.push({
        value: totalAcceleration,
        timestamp: currentTime
    });
    
    // Keep only recent data (last 1 second)
    this.accelerationData = this.accelerationData.filter(
        data => currentTime - data.timestamp <= 1000
    );
    
    if (totalAcceleration > this.maxAcceleration) {
        this.maxAcceleration = totalAcceleration;
    }
    
    // „Äê‰øÆÊ≠£„Äë„Éë„ÉØ„Éº„É°„Éº„Çø„ÉºË°®Á§∫„ÅÆË™øÊï¥
    const powerLevel = Math.min((totalAcceleration / 15) * 100, 100); // 20„Åã„Çâ15„Å´Â§âÊõ¥
    document.getElementById('powerFill').style.height = powerLevel + '%';
    document.getElementById('speed').textContent = `${Math.round(totalAcceleration * 10)/10}`;
    
    // „Äê‰øÆÊ≠£„ÄëÊäïÁêÉÊ§úÂá∫„ÅÆÈñæÂÄ§Ë™øÊï¥
    if (totalAcceleration > this.shakeThreshold && this.maxAcceleration > this.shakeThreshold) {
        console.log('üéØ ÊäïÁêÉÊ§úÂá∫ÔºÅÊúÄÂ§ßÂä†ÈÄüÂ∫¶:', this.maxAcceleration);
        this.startThrowWithShake();
    }
}
    
    setupFallbackShakeDetection() {
        console.log('üîß „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØÊåØ„ÇäÊ§úÂá∫„ÇíË®≠ÂÆö');
        let tapCount = 0;
        let lastTapTime = 0;
        
        const handleTap = (e) => {
            if (!this.isDetectingShake) return;
            
            console.log('üëÜ „Çø„ÉÉ„ÉóÊ§úÂá∫');
            const currentTime = Date.now();
            if (currentTime - lastTapTime < 500) {
                tapCount++;
                console.log(`„Çø„ÉÉ„ÉóÂõûÊï∞: ${tapCount}`);
                if (tapCount >= 3) {
                    this.maxAcceleration = 25;
                    console.log('üéØ „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØÊäïÁêÉÁô∫ÂãïÔºÅ');
                    this.startThrowWithShake();
                    tapCount = 0;
                }
            } else {
                tapCount = 1;
            }
            lastTapTime = currentTime;
        };
        
        document.addEventListener('touchstart', handleTap);
        document.addEventListener('click', handleTap);
        
        // ÁîªÈù¢„ÇíÈï∑Êäº„Åó„Åó„ÅüÂ†¥Âêà„ÇÇÊäïÁêÉÁô∫Âãï
        let longPressTimer = null;
        document.addEventListener('touchstart', (e) => {
            if (!this.isDetectingShake) return;
            longPressTimer = setTimeout(() => {
                this.maxAcceleration = 20;
                console.log('‚è±Ô∏è Èï∑Êäº„ÅóÊäïÁêÉÁô∫ÂãïÔºÅ');
                this.startThrowWithShake();
            }, 1500);
        });
        
        document.addEventListener('touchend', () => {
            if (longPressTimer) {
                clearTimeout(longPressTimer);
                longPressTimer = null;
            }
        });
    }
    
    updateDisplay() {
        document.getElementById('heading').textContent = Math.round(this.heading) + '¬∞';
        document.getElementById('compass').textContent = this.getCompassDirection(this.heading);
        document.getElementById('tilt').textContent = Math.round(this.tilt) + '¬∞';
        
        // Update compass needle
        this.compassNeedle.style.transform = `rotate(${this.heading}deg)`;
        
        // „Çπ„Çø„Éº„ÉàÂú∞ÁÇπ„Åã„Çâ„ÅÆË∑ùÈõ¢„ÇíË®àÁÆó„Åó„Å¶Ë°®Á§∫
        if (!this.isBallMoving) {
            this.totalDistance = this.calculateDistance(
                this.startPosition.lat, this.startPosition.lng,
                this.ballPosition.lat, this.ballPosition.lng
            );
            document.getElementById('distance').textContent = Math.round(this.totalDistance) + 'm';
        }
        
        // Map rotation management
        const DEAD_ZONE_START = 350;
        const DEAD_ZONE_END = 10;
        
        const isHeadingInDeadZone = (this.heading >= DEAD_ZONE_START && this.heading < 360) || 
                                    (this.heading >= 0 && this.heading < DEAD_ZONE_END);

        if (!this.isActive && !this.isCountdownActive && !this.isBallMoving && this.isMapReady && !isHeadingInDeadZone) {
            this.mapElement.style.transform = `rotate(${-this.heading}deg)`;
        }
        
        this.updateCoordinatesDisplay();
    }
    
    getCompassDirection(heading) {
        const directions = ['Âåó', 'ÂåóÊù±', 'Êù±', 'ÂçóÊù±', 'Âçó', 'ÂçóË•ø', 'Ë•ø', 'ÂåóË•ø'];
        const index = Math.round(heading / 45) % 8;
        return directions[index];
    }
    
    updateCoordinatesDisplay() {
        const lat = this.ballPosition.lat.toFixed(6);
        const lng = this.ballPosition.lng.toFixed(6);
        document.getElementById('coordinates').textContent = `${lat}, ${lng}`;
    }
    
    setupComplete() {
        this.updateStatus('üéØ ÊäïÁêÉÊ∫ñÂÇôÂÆå‰∫ÜÔºÅ„Çπ„Çø„Éº„Éà„Éú„Çø„É≥„ÇíÊäº„Åó„Å¶„Åè„Å†„Åï„ÅÑ');
        this.updateCoordinatesDisplay();
        
        // Initialize canvas
        this.initCanvas();
        
        if (this.map) {
            try {
                this.map.setCenter(this.currentPosition);
                setTimeout(() => {
                    if (window.google && google.maps && google.maps.event) {
                        google.maps.event.trigger(this.map, 'resize');
                        this.map.setCenter(this.currentPosition);
                    }
                }, 100);
            } catch (e) {
                console.warn('‚ö†Ô∏è Map setup failed:', e);
            }
        }
        
        const startBtn = document.getElementById('startBtn');
        startBtn.textContent = 'üöÄ „Çπ„Çø„Éº„Éà';
        startBtn.disabled = false;
        startBtn.classList.add('countdown-ready');
        startBtn.onclick = () => this.startCountdown();
    }
    
// CanvasÂàùÊúüÂåñÔºà„Ç®„É©„Éº„Éè„É≥„Éâ„É™„É≥„Ç∞Âº∑ÂåñÔºâ
initCanvas() {
    if (!this.gameCanvas) {
        console.error('‚ùå Game canvas element not found');
        return false;
    }
    
    const container = this.gameCanvas.parentElement;
    if (!container) {
        console.error('‚ùå Canvas container not found');
        return false;
    }
    
    // „Äê‰øÆÊ≠£„ÄëÂàùÊúü„Çµ„Ç§„Ç∫„ÅØÂü∫Êú¨„Çµ„Ç§„Ç∫„ÅßË®≠ÂÆö
    this.canvasWidth = container.clientWidth;
    this.canvasHeight = container.clientHeight;
    
    if (this.canvasWidth <= 0 || this.canvasHeight <= 0) {
        console.error('‚ùå Invalid canvas dimensions:', this.canvasWidth, 'x', this.canvasHeight);
        return false;
    }
    
    //„Ç≠„É£„É≥„Éê„Çπ„Çµ„Ç§„Ç∫„ÇíÁîªÈù¢„Çµ„Ç§„Ç∫„Å´Ë®≠ÂÆö
    this.gameCanvas.width = this.canvasWidth;
    this.gameCanvas.height = this.canvasHeight;
    
    try {
        this.ctx = this.gameCanvas.getContext('2d');
        if (!this.ctx) {
            throw new Error('Canvas context is null');
        }
    } catch (error) {
        console.error('‚ùå Failed to get canvas context:', error);
        return false;
    }
    
    this.ballCanvasX = this.canvasWidth / 2;
    this.ballCanvasY = this.canvasHeight / 2;
    
    this.loadBallImage();
    
    console.log('‚úÖ Canvas initialized successfully:', this.canvasWidth, 'x', this.canvasHeight);
    return true;
}


    // „Éú„Éº„É´ÁîªÂÉèË™≠„ÅøËæº„ÅøÔºàÊîπÂñÑÁâàÔºâ
    loadBallImage() {
        console.log('üèÄ „Éú„Éº„É´ÁîªÂÉèË™≠„ÅøËæº„ÅøÈñãÂßã');
        this.ballImage = new Image();

        this.ballImage.onload = () => {
            console.log('‚úÖ Ball image loaded successfully');
            this.isBallImageReady = true;
            this.updatePreparationStatus();
        };
        this.ballImage.onerror = () => {
            console.warn('‚ö†Ô∏è Ball image failed to load, creating fallback');
            this.createFallbackBallImage();
            this.ballImage.src = 'ball.png';// „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ
        
        // ball.png„ÇÇÂ§±Êïó„Åó„ÅüÂ†¥Âêà„ÅÆ„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ
            this.ballImage.onerror = () => {
                console.warn('‚ö†Ô∏è ball.png also failed, creating fallback');
                this.createFallbackBallImage();
            };
        };

        // ‰øÆÊ≠£: ball.gif „ÇíÊúÄÂàù„Å´Ë©¶Ë°åÔºà„Åì„ÅÆË°å„ÇíÂ§âÊõ¥Ôºâ
        this.ballImage.src = 'ball.gif';  // ÂÖÉ: 'ball.png'
    }
    
    // „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ„Éú„Éº„É´ÁîªÂÉèÁîüÊàê
    createFallbackBallImage() {
        const canvas = document.createElement('canvas');
        canvas.width = 120;
        canvas.height = 120;
        const ctx = canvas.getContext('2d');
        
        const centerX = 60;
        const centerY = 60;
        const radius = 55;
        
        // „Éê„Çπ„Ç±„ÉÉ„Éà„Éú„Éº„É´È¢®„ÅÆ„Éú„Éº„É´
        const gradient = ctx.createRadialGradient(
            centerX - 20, centerY - 20, 0,
            centerX, centerY, radius
        );
        gradient.addColorStop(0, '#ff8a65');
        gradient.addColorStop(0.7, '#ff5722');
        gradient.addColorStop(1, '#d84315');
        
        ctx.fillStyle = gradient;
        ctx.beginPath();
        ctx.arc(centerX, centerY, radius, 0, 2 * Math.PI);
        ctx.fill();
        
        // „Éê„Çπ„Ç±„ÉÉ„Éà„Éú„Éº„É´„ÅÆ„É©„Ç§„É≥
        ctx.strokeStyle = '#8d4004';
        ctx.lineWidth = 3;
        
        ctx.beginPath();
        ctx.moveTo(centerX, centerY - radius);
        ctx.lineTo(centerX, centerY + radius);
        ctx.stroke();
        
        ctx.beginPath();
        ctx.arc(centerX, centerY, radius * 0.7, -Math.PI, 0);
        ctx.stroke();
        
        ctx.beginPath();
        ctx.arc(centerX, centerY, radius * 0.7, 0, Math.PI);
        ctx.stroke();
        
        // „Éè„Ç§„É©„Ç§„Éà
        ctx.fillStyle = '#ffccbc';
        ctx.beginPath();
        ctx.arc(centerX - 15, centerY - 15, 8, 0, 2 * Math.PI);
        ctx.fill();
        
        this.ballImage = new Image();
        this.ballImage.onload = () => {
            console.log('‚úÖ Fallback ball image created');
            this.isBallImageReady = true;
            this.updatePreparationStatus();
        };
        this.ballImage.src = canvas.toDataURL();
    }
    
    fallbackSetup() {
        setTimeout(() => {
            this.isMapReady = true;
            this.isMapFullyLoaded = true;
            this.isPermissionGranted = true;
            this.setupComplete();
        }, 2000);
    }
    
    async startCountdown() {
        if (this.isCountdownActive || this.isActive) return;
        
        this.playSound('start');
        
        this.isCountdownActive = true;
        const startBtn = document.getElementById('startBtn');
        startBtn.disabled = true;
        startBtn.classList.remove('countdown-ready');
        
        let count = 3;
        this.showCountdown(count);
        
        this.countdownTimer = setInterval(() => {
            count--;
            if (count > 0) {
                this.showCountdown(count);
            } else {
                this.showCountdown('Êäï„Åí„Å¶ÔºÅ');
                setTimeout(() => {
                    this.hideCountdown();
                    this.enableThrowDetection();
                }, 1000);
                clearInterval(this.countdownTimer);
            }
        }, 1000);
    }
    
    showCountdown(text) {
        this.hideCountdown();
        
        this.countdownElement = document.createElement('div');
        this.countdownElement.className = 'countdown';
        this.countdownElement.textContent = text;
        document.body.appendChild(this.countdownElement);
    }
    
    hideCountdown() {
        if (this.countdownElement && this.countdownElement.parentNode) {
            this.countdownElement.parentNode.removeChild(this.countdownElement);
            this.countdownElement = null;
        }
    }
    
    enableThrowDetection() {
        this.isCountdownActive = false;
        this.isDetectingShake = true;
        this.accelerationData = [];
        this.maxAcceleration = 0;
        
        document.getElementById('powerMeter').style.display = 'block';
        
        this.updateStatus('üì± „Çπ„Éû„Éõ„ÇíÊåØ„Å£„Å¶ÊäïÁêÉ„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºÅÔºà3Âõû„Çø„ÉÉ„Éó„Åæ„Åü„ÅØÈï∑Êäº„Åó„Åß„ÇÇÂèØËÉΩÔºâ');
        
        // 15Áßí„Åß„Çø„Ç§„É†„Ç¢„Ç¶„Éà
        setTimeout(() => {
            if (!this.isActive && this.isDetectingShake) {
                this.isDetectingShake = false;
                document.getElementById('powerMeter').style.display = 'none';
                this.updateStatus('‚è∞ „Çø„Ç§„É†„Ç¢„Ç¶„Éà„Åó„Åæ„Åó„Åü„ÄÇÂÜçÂ∫¶„ÅäË©¶„Åó„Åè„Å†„Åï„ÅÑ„ÄÇ');
                this.reset();
            }
        }, 15000);
    }
    
    startThrowWithShake() {
        if (this.isActive || !this.isDetectingShake) return;
        
        console.log('üéØ ÊäïÁêÉÊ∫ñÂÇôÂá¶ÁêÜÈñãÂßã');
        this.isDetectingShake = false;
        document.getElementById('powerMeter').style.display = 'none';
        
        // „Çà„ÇäÁ¥∞„Åã„ÅÑÊÆµÈöéÂàÜ„Åë„ÅßÁèæÂÆüÁöÑ„Å™È£õË∑ùÈõ¢„Å´
        let throwPower;
    
        if (this.maxAcceleration <= 10) {
        // ËªΩ„ÅÑÊåØ„Çä: 100-300m
        throwPower = 100 + (this.maxAcceleration - 8) * 100;
    } else if (this.maxAcceleration <= 15) {
        // ÊôÆÈÄö„ÅÆÊåØ„Çä: 300-600m  
        throwPower = 300 + (this.maxAcceleration - 10) * 60;
    } else if (this.maxAcceleration <= 20) {
        // Âº∑„ÅÑÊåØ„Çä: 600-1000m
        throwPower = 600 + (this.maxAcceleration - 15) * 80;
    } else if (this.maxAcceleration <= 30) {
        // „Å®„Å¶„ÇÇÂº∑„ÅÑÊåØ„Çä: 1000-1500m
        throwPower = 1000 + (this.maxAcceleration - 20) * 100;
    } else {
        // Ë∂ÖÂº∑Âäõ„Å™ÊåØ„Çä: 1500-2000m
        throwPower = Math.min(2000, 1500 + (this.maxAcceleration - 25) * 100);
    }
        this.throwPower = Math.max(100, Math.round(throwPower)); // ÊúÄ‰Ωé100m
        this.throwAngle = this.heading;
        
        console.log(`ÊäïÁêÉÊ§úÂá∫! ÊúÄÂ§ßÂä†ÈÄüÂ∫¶: ${this.maxAcceleration.toFixed(2)}, „Éë„ÉØ„Éº: ${this.throwPower}m, ÊñπÂêë: ${this.throwAngle}¬∞`);
        
        // „Éá„Éê„ÉÉ„Ç∞Ë°®Á§∫
        this.showDebug(`üéØ ÊäïÁêÉ„Éë„ÉØ„ÉºË®àÁÆó:`);
        this.showDebug(`  - ÊúÄÂ§ßÂä†ÈÄüÂ∫¶: ${this.maxAcceleration.toFixed(2)}`);
        this.showDebug(`  - Ë®àÁÆó„Åï„Çå„ÅüÈ£õË∑ùÈõ¢: ${this.throwPower}m`);
        this.showDebug(`  - ÊäïÁêÉÊñπÂêë: ${this.throwAngle}Â∫¶`);

        this.ballElement.classList.add('throwing');
        this.ballTrailPoints = [];
        this.clearTrails();
        this.ballPosition = { ...this.startPosition };
        
        this.showResourcePreparation();
    }
    
    showResourcePreparation() {
        this.preparationOverlay = document.createElement('div');
        this.preparationOverlay.className = 'preparation-overlay';
        this.preparationOverlay.innerHTML = `
            <div>
                <div style="font-size: 32px; margin-bottom: 20px;">üèÄ</div>
                <div style="font-size: 24px; margin-bottom: 20px;">ÊäïÁêÉÊ∫ñÂÇô‰∏≠...</div>
                
                <div class="preparation-status">
                    <div class="status-item status-loading" id="statusAudio">
                        üîä ÂäπÊûúÈü≥: Ê∫ñÂÇô‰∏≠...
                    </div>
                    <div class="status-item status-loading" id="statusImages">
                        üõ∞Ô∏è Ëà™Á©∫ÂÜôÁúü: Ê∫ñÂÇô‰∏≠...
                    </div>
                    <div class="status-item status-loading" id="statusBall">
                        üèÄ „Éú„Éº„É´ÁîªÂÉè: Ê∫ñÂÇô‰∏≠...
                    </div>
                </div>
                
                <button class="kick-button" id="kickButton" disabled>
                    Ê∫ñÂÇô‰∏≠...
                </button>
            </div>
        `;
        document.body.appendChild(this.preparationOverlay);
        
        this.prepareResources();
    }
    
    async prepareResources() {
        console.log('üöÄ „É™„ÇΩ„Éº„ÇπÊ∫ñÂÇôÈñãÂßã');

        // ‰øÆÊ≠£: Áä∂ÊÖã„Çí„É™„Çª„ÉÉ„ÉàÔºà„Åì„ÅÆ3Ë°å„ÇíËøΩÂä†Ôºâ
        this.isAudioReady = false;
        this.isAerialImagesReady = false;
        this.isBallImageReady = false;
    
        
        // ‰∏¶Ë°å„Åó„Å¶„É™„ÇΩ„Éº„Çπ„ÇíÊ∫ñÂÇô
        this.prepareAudio();
        this.prepareAerialImages();
        this.loadBallImage();
    }
    
    // Èü≥Â£∞Ê∫ñÂÇôÔºàÊîπÂñÑÁâàÔºâ
    prepareAudio() {
        console.log('üîä ÂäπÊûúÈü≥Ê∫ñÂÇôÈñãÂßã');
        
        const kickAudio = this.sounds.kick;
        // „Åæ„ÅöÁèæÂú®„ÅÆÁä∂ÊÖã„Çí„ÉÅ„Çß„ÉÉ„ÇØ
        if (kickAudio.readyState >= 2) {
            console.log('‚úÖ ÂäπÊûúÈü≥„ÅØÊó¢„Å´Ê∫ñÂÇôÊ∏à„Åø');
            this.isAudioReady = true;
            this.updatePreparationStatus();
            return;
        }

        const onCanPlay = () => {
            console.log('‚úÖ ÂäπÊûúÈü≥Ê∫ñÂÇôÂÆå‰∫ÜÔºà„Ç§„Éô„É≥„ÉàÔºâ');
            this.isAudioReady = true;
            this.updatePreparationStatus();
            cleanup();
        };
            const onError = (e) => {
                console.warn('‚ö†Ô∏è ÂäπÊûúÈü≥Ë™≠„ÅøËæº„ÅøÂ§±Êïó„ÄÅÊñ∞„Åó„ÅÑ„Ç§„É≥„Çπ„Çø„É≥„Çπ„ÅßÂÜçË©¶Ë°å', e);
                // Êñ∞„Åó„ÅÑAudio„Ç§„É≥„Çπ„Çø„É≥„Çπ„Çí‰ΩúÊàê
                const newAudio = new Audio('kick.mp3');
                newAudio.volume = 0.8;
                newAudio.preload = 'auto';
                this.sounds.kick = newAudio;
        
                newAudio.onload = () => {
                    console.log('‚úÖ Êñ∞„Åó„ÅÑÂäπÊûúÈü≥„Ç§„É≥„Çπ„Çø„É≥„ÇπÊ∫ñÂÇôÂÆå‰∫Ü');
                    this.isAudioReady = true;
                    this.updatePreparationStatus();
                };
        
                newAudio.onerror = () => {
                    console.log('‚ö†Ô∏è ÂäπÊûúÈü≥Ê∫ñÂÇôÂ§±Êïó„ÄÅ„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ„ÅßÁ∂öË°å');
                    this.isAudioReady = true;
                    this.updatePreparationStatus();
                };
        
                cleanup();
                };

            const cleanup = () => {
            kickAudio.removeEventListener('canplaythrough', onCanPlay);
            kickAudio.removeEventListener('error', onError);
            };
    
            kickAudio.addEventListener('canplaythrough', onCanPlay, { once: true });
            kickAudio.addEventListener('error', onError, { once: true });
    
            try {
                kickAudio.load();
            } catch (e) {
            console.warn('Audio load failed:', e);
            onError(e);
        }


        // „Çø„Ç§„É†„Ç¢„Ç¶„ÉàË®≠ÂÆö„ÇíÁü≠Á∏Æ
        setTimeout(() => {
            if (!this.isAudioReady) {
                console.warn('‚ö†Ô∏è ÂäπÊûúÈü≥Ê∫ñÂÇô„Çø„Ç§„É†„Ç¢„Ç¶„Éà„ÄÅÂº∑Âà∂ÁöÑ„Å´Ê∫ñÂÇôÂÆå‰∫Ü„Å®„Åô„Çã');
                this.isAudioReady = true;
                this.updatePreparationStatus();
                cleanup();
            }
        }, 2000);
    }
        
    
    updatePreparationStatus() {
        if (!this.preparationOverlay) return;
        
        const statusAudio = this.preparationOverlay.querySelector('#statusAudio');
        const statusImages = this.preparationOverlay.querySelector('#statusImages');
        const statusBall = this.preparationOverlay.querySelector('#statusBall');
        const kickButton = this.preparationOverlay.querySelector('#kickButton');
        
        if (this.isAudioReady) {
            statusAudio.className = 'status-item status-ready';
            statusAudio.textContent = 'üîä ÂäπÊûúÈü≥: Ê∫ñÂÇôÂÆå‰∫Ü ‚úÖ';
        }
        
        if (this.isAerialImagesReady) {
            statusImages.className = 'status-item status-ready';
            statusImages.textContent = `üõ∞Ô∏è Ëà™Á©∫ÂÜôÁúü: Ê∫ñÂÇôÂÆå‰∫Ü (${this.aerialImages.length}Êûö) ‚úÖ`;
        }
        
        if (this.isBallImageReady) {
            statusBall.className = 'status-item status-ready';
            statusBall.textContent = 'üèÄ „Éú„Éº„É´ÁîªÂÉè: Ê∫ñÂÇôÂÆå‰∫Ü ‚úÖ';
        }
        
        if (this.isAudioReady && this.isAerialImagesReady && this.isBallImageReady) {
            kickButton.disabled = false;
            kickButton.textContent = 'üöÄ KICK!';
            kickButton.onclick = () => {
                this.hideResourcePreparation();
                 // „Åì„Åì„Åß„Éú„Éº„É´ÁßªÂãï„ÇíÈñãÂßã
                this.startBallMovement();
            };
            
            console.log('üéØ ÂÖ®„É™„ÇΩ„Éº„ÇπÊ∫ñÂÇôÂÆå‰∫ÜÔºÅKick„Éú„Çø„É≥ÊúâÂäπÂåñ');
        }
    }
    
    hideResourcePreparation() {
        if (this.preparationOverlay && this.preparationOverlay.parentNode) {
            this.preparationOverlay.parentNode.removeChild(this.preparationOverlay);
            this.preparationOverlay = null;
        }
    }

    // „ÄêÈáçË¶Å‰øÆÊ≠£„ÄëÊäïÁêÉ„Éë„ÉØ„Éº„Å´Âøú„Åò„Åü„Ç∫„Éº„É†„É¨„Éô„É´„Å®ÁîªÂÉè„Çµ„Ç§„Ç∫„ÇíË®àÁÆó
calculateOptimalImageParams() {
    const powerMeters = this.throwPower;
    this.showDebug(`üéØ ÊäïÁêÉ„Éë„ÉØ„Éº: ${powerMeters}m`);
    
    let zoom, imageSize;

    // „Äê‰øÆÊ≠£„Äë„Ç≠„É£„É≥„Éê„Çπ„Çµ„Ç§„Ç∫„Å´Âøú„Åò„Å¶ÁîªÂÉè„Çµ„Ç§„Ç∫„ÇíË™øÊï¥
    const canvasScale = Math.max(this.canvasWidth / 800, this.canvasHeight / 600);
    
    // „Éë„ÉØ„Éº„Å´Âøú„Åò„Å¶ÈÅ©Âàá„Å™„Ç∫„Éº„É†„É¨„Éô„É´„ÇíË®≠ÂÆöÔºàÁîªÂÉè„Çµ„Ç§„Ç∫„ÇíÂ∞è„Åï„ÅèË™øÊï¥Ôºâ
    if (powerMeters <= 200) {
        zoom = 18;  // ËøëË∑ùÈõ¢Áî®ÔºöÂª∫Áâ©Ë©≥Á¥∞„É¨„Éô„É´
        imageSize = 1024;  // 3072 ‚Üí 1024„Å´Á∏ÆÂ∞è
    } else if (powerMeters <= 500) {
        zoom = 17;  // ‰∏≠Ë∑ùÈõ¢Áî®ÔºöË°óÂå∫„É¨„Éô„É´
        imageSize = 1536;  // 4096 ‚Üí 1536„Å´Á∏ÆÂ∞è
    } else if (powerMeters <= 1000) {
        zoom = 16;  // Èï∑Ë∑ùÈõ¢Áî®ÔºöÂú∞Âå∫„É¨„Éô„É´
        imageSize = 2048;  // 5120 ‚Üí 2048„Å´Á∏ÆÂ∞è
    } else if (powerMeters <= 2000) {
        zoom = 15;  // Ë∂ÖÈï∑Ë∑ùÈõ¢Áî®ÔºöÂ∏ÇÂå∫„É¨„Éô„É´
        imageSize = 2560;  // 6144 ‚Üí 2560„Å´Á∏ÆÂ∞è
    } else {
        zoom = 14;  // Ê•µÈï∑Ë∑ùÈõ¢Áî®ÔºöÂ∫ÉÂüü„É¨„Éô„É´
        imageSize = 3072;  // 8192 ‚Üí 3072„Å´Á∏ÆÂ∞è
    }
    
    this.showDebug(`üìê ÈÅ∏Êäû„Éë„É©„É°„Éº„Çø: zoom=${zoom}, imageSize=${imageSize}px`);
    
    return { zoom, imageSize };
}



    

// Ëà™Á©∫ÂÜôÁúüÊ∫ñÂÇô„Ç®„É©„ÉºË©≥Á¥∞Ë™øÊüªÁâàÔºàprepareAerialImages„É°„ÇΩ„ÉÉ„Éâ„ÇíÁΩÆ„ÅçÊèõ„ÅàÔºâ

// ÊâãÈ†Ü1: Êó¢Â≠ò„ÅÆprepareAerialImages„É°„ÇΩ„ÉÉ„Éâ„Çí‰ª•‰∏ã„Å´ÂÆåÂÖ®ÁΩÆ„ÅçÊèõ„Åà„Åó„Å¶„Åè„Å†„Åï„ÅÑ

async prepareAerialImages() {
    this.showDebug('üõ∞Ô∏è Âú∞ÁêÜÈô¢Âú∞Âõ≥Ëà™Á©∫ÂÜôÁúüÊ∫ñÂÇôÈñãÂßã');
    
    try {
        this.showDebug(`üìç ‰ΩçÁΩÆ: ${this.startPosition.lat.toFixed(6)}, ${this.startPosition.lng.toFixed(6)}`);
        this.showDebug(`üß≠ ÊäïÁêÉËßíÂ∫¶: ${this.throwAngle}Â∫¶`);
        
        // „ÄêÈáçË¶Å„ÄëÊäïÁêÉ„Éë„ÉØ„Éº„Å´Âøú„Åò„Å¶ÊúÄÈÅ©„Å™„Éë„É©„É°„Éº„Çø„ÇíË®àÁÆó
        const { zoom, imageSize } = this.calculateOptimalImageParams();

        // Âú∞ÁêÜÈô¢Âú∞Âõ≥„ÅÆËà™Á©∫ÂÜôÁúü„Çí‰ΩøÁî®
        const aerialImage = await this.createGSIAerialImage(
            this.startPosition.lat, 
            this.startPosition.lng, 
            zoom,     // ‚Üê ÂãïÁöÑ„Å™ÂÄ§
            imageSize // ‚Üê ÂãïÁöÑ„Å™ÂÄ§
            
        );
        
        this.showDebug(`‚úÖ Âú∞ÁêÜÈô¢Âú∞Âõ≥Ëà™Á©∫ÂÜôÁúüÂèñÂæóÊàêÂäü: ${aerialImage.naturalWidth}x${aerialImage.naturalHeight}`);
        
        // ÊäïÁêÉÊñπÂêë„Å´ÂõûËª¢
        this.showDebug(`üîÑ ÁîªÂÉèÂõûËª¢ÈñãÂßã: ${this.throwAngle}Â∫¶`);
        const rotatedImage = this.rotateImageForThrow(aerialImage, this.throwAngle);
        
        // ÂõûËª¢ÂÆå‰∫Ü„ÇíÂæÖ„Å§
        await new Promise((resolve) => {
            if (rotatedImage.complete) {
                this.showDebug('‚úÖ ÂõûËª¢ÁîªÂÉèÂç≥Â∫ß„Å´ÂÆå‰∫Ü');
                resolve();
            } else {
                this.showDebug('‚è≥ ÂõûËª¢ÁîªÂÉèË™≠„ÅøËæº„ÅøÂæÖÊ©ü‰∏≠...');
                rotatedImage.onload = () => {
                    this.showDebug('‚úÖ ÂõûËª¢ÁîªÂÉèË™≠„ÅøËæº„ÅøÂÆå‰∫Ü');
                    resolve();
                };
                rotatedImage.onerror = (e) => {
                    this.showDebug(`‚ùå ÂõûËª¢ÁîªÂÉèË™≠„ÅøËæº„ÅøÂ§±Êïó: ${e}`);
                    resolve();
                };
                setTimeout(() => {
                    this.showDebug('‚è∞ ÂõûËª¢ÁîªÂÉèË™≠„ÅøËæº„Åø„Çø„Ç§„É†„Ç¢„Ç¶„Éà');
                    resolve();
                }, 3000);
            }
        });
        
        this.aerialImages = [{
            image: rotatedImage,
            position: this.startPosition,
            distance: 0,
            index: 0,
            zoom: zoom,
            imageSize: imageSize
        }];

        this.showDebug('‚úÖ Âú∞ÁêÜÈô¢Âú∞Âõ≥Ëà™Á©∫ÂÜôÁúüÊ∫ñÂÇôÂÆå‰∫ÜÔºÅ');
        this.debugAerialImageState();
        
        this.isAerialImagesReady = true;
        this.updatePreparationStatus();

    } catch (error) {
        this.showDetailedError('Âú∞ÁêÜÈô¢Âú∞Âõ≥Ëà™Á©∫ÂÜôÁúüÊ∫ñÂÇô', error);
        
        // „Ç®„É©„ÉºÊôÇ„ÅØÂü∫Êú¨„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØÁîªÂÉè„Çí‰ΩøÁî®
        this.showDebug('üé® Âü∫Êú¨„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØÁîªÂÉèÁîüÊàê');
        const fallbackImage = this.createBasicFallbackImage();
        
        this.aerialImages = [{
            image: fallbackImage,
            position: this.startPosition,
            distance: 0,
            index: 0
        }];
        
        this.showDebug('‚úÖ „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØÁîªÂÉèÊ∫ñÂÇôÂÆå‰∫Ü');
        this.isAerialImagesReady = true;
        this.updatePreparationStatus();
    }
}


// ÊâãÈ†Ü2: prepareAerialImages„É°„ÇΩ„ÉÉ„Éâ„ÅÆÁõ¥Âæå„Å´‰ª•‰∏ã„ÅÆ„É°„ÇΩ„ÉÉ„Éâ„ÇíËøΩÂä†„Åó„Å¶„Åè„Å†„Åï„ÅÑ

// Âú∞ÁêÜÈô¢Âú∞Âõ≥Ëà™Á©∫ÂÜôÁúü‰ΩúÊàê„É°„ÇΩ„ÉÉ„Éâ
async createGSIAerialImage(lat, lng, zoom, size) {
    this.showDebug(`üóæ Âú∞ÁêÜÈô¢Âú∞Âõ≥„Çø„Ç§„É´Ë®àÁÆó‰∏≠: lat=${lat.toFixed(6)}, lng=${lng.toFixed(6)}, zoom=${zoom}`);
    
    // „Çø„Ç§„É´Â∫ßÊ®ôË®àÁÆó
    const centerX = this.lonToTileX(lng, zoom);
    const centerY = this.latToTileY(lat, zoom);
    
    this.showDebug(`üìê „Çø„Ç§„É´‰∏≠ÂøÉÂ∫ßÊ®ô: X=${centerX.toFixed(3)}, Y=${centerY.toFixed(3)}`);
    
    // ÂøÖË¶Å„Å™„Çø„Ç§„É´Êï∞Ë®àÁÆó (size=1024„Å™„Çâ4x4„Çø„Ç§„É´)
    const tilesNeeded = Math.ceil(size / 256);
    const startX = Math.floor(centerX - tilesNeeded / 2);
    const startY = Math.floor(centerY - tilesNeeded / 2);
    
    this.showDebug(`üì¶ „Çø„Ç§„É´ÁØÑÂõ≤: X=${startX}~${startX + tilesNeeded}, Y=${startY}~${startY + tilesNeeded} (${tilesNeeded}x${tilesNeeded})`);
    
    // Canvas‰ΩúÊàê
    const canvas = document.createElement('canvas');
    canvas.width = size;
    canvas.height = size;
    const ctx = canvas.getContext('2d');
    
    if (!ctx) {
        throw new Error('Canvas context‰ΩúÊàêÂ§±Êïó');
    }
    
    // ËÉåÊôØ„ÇíËñÑ„ÅÑ„Ç∞„É¨„Éº„ÅßÂ°ó„Çä„Å§„Å∂„ÅóÔºà„Çø„Ç§„É´Â¢ÉÁïåÁ¢∫Ë™çÁî®Ôºâ
    ctx.fillStyle = '#f0f0f0';
    ctx.fillRect(0, 0, size, size);
    
    const promises = [];
    let loadedTiles = 0;
    let totalTiles = (tilesNeeded + 1) * (tilesNeeded + 1);
    
    this.showDebug(`üì• ${totalTiles}ÂÄã„ÅÆ„Çø„Ç§„É´Ë™≠„ÅøËæº„ÅøÈñãÂßã...`);
    
    // Ë§áÊï∞„Çø„Ç§„É´„Çí‰∏¶Ë°å„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ
    for (let x = 0; x < tilesNeeded + 1; x++) {
        for (let y = 0; y < tilesNeeded + 1; y++) {
            const tileX = startX + x;
            const tileY = startY + y;
            
            const promise = this.loadGSITile(tileX, tileY, zoom).then(tileImg => {
                if (tileImg) {
                    const drawX = x * 256 - ((centerX - startX) * 256 - size / 2);
                    const drawY = y * 256 - ((centerY - startY) * 256 - size / 2);
                    ctx.drawImage(tileImg, drawX, drawY, 256, 256);
                    loadedTiles++;
                    this.showDebug(`‚úÖ „Çø„Ç§„É´${loadedTiles}/${totalTiles}: (${tileX},${tileY}) ‚Üí (${Math.round(drawX)},${Math.round(drawY)})`);
                } else {
                    this.showDebug(`‚ö†Ô∏è „Çø„Ç§„É´Ë™≠„ÅøËæº„ÅøÂ§±Êïó: (${tileX},${tileY})`);
                }
            }).catch(e => {
                this.showDebug(`‚ùå „Çø„Ç§„É´(${tileX},${tileY})„Ç®„É©„Éº: ${e.message}`);
            });
            
            promises.push(promise);
        }
    }
    
    // ÂÖ®„Çø„Ç§„É´Ë™≠„ÅøËæº„ÅøÂÆå‰∫Ü„ÇíÂæÖ„Å§
    await Promise.all(promises);
    
    this.showDebug(`üéØ „Çø„Ç§„É´Ë™≠„ÅøËæº„ÅøÂÆå‰∫Ü: ${loadedTiles}/${totalTiles}ÂÄãÊàêÂäü`);
    
    // Canvas„Åã„ÇâÁîªÂÉè„Çí‰ΩúÊàê
    const finalImage = new Image();
    finalImage.src = canvas.toDataURL('image/jpeg', 0.9);
    
    return new Promise((resolve, reject) => {
        finalImage.onload = () => {
            this.showDebug(`‚úÖ Âú∞ÁêÜÈô¢Âú∞Âõ≥ÂêàÊàêÁîªÂÉè‰ΩúÊàêÂÆå‰∫Ü: ${finalImage.naturalWidth}x${finalImage.naturalHeight}`);
            resolve(finalImage);
        };
        finalImage.onerror = (e) => {
            this.showDebug(`‚ùå ÂêàÊàêÁîªÂÉè‰ΩúÊàêÂ§±Êïó: ${e}`);
            reject(new Error('ÂêàÊàêÁîªÂÉè‰ΩúÊàêÂ§±Êïó'));
        };
        
        // „Çø„Ç§„É†„Ç¢„Ç¶„Éà
        setTimeout(() => {
            this.showDebug('‚è∞ ÂêàÊàêÁîªÂÉè‰ΩúÊàê„Çø„Ç§„É†„Ç¢„Ç¶„Éà');
            reject(new Error('ÂêàÊàêÁîªÂÉè‰ΩúÊàê„Çø„Ç§„É†„Ç¢„Ç¶„Éà'));
        }, 5000);
    });
}

// ÊâãÈ†Ü3: createGSIAerialImage„É°„ÇΩ„ÉÉ„Éâ„ÅÆÁõ¥Âæå„Å´‰ª•‰∏ã„ÅÆ„É°„ÇΩ„ÉÉ„Éâ„ÇíËøΩÂä†„Åó„Å¶„Åè„Å†„Åï„ÅÑ

// Âú∞ÁêÜÈô¢Âú∞Âõ≥„Çø„Ç§„É´Ë™≠„ÅøËæº„Åø
loadGSITile(x, y, z) {
    return new Promise((resolve) => {
        const url = `https://cyberjapandata.gsi.go.jp/xyz/seamlessphoto/${z}/${x}/${y}.jpg`;
        
        const img = new Image();
        // CORSË®≠ÂÆöÔºàÂú∞ÁêÜÈô¢Âú∞Âõ≥„ÅØË®±ÂèØ„Åï„Çå„Å¶„ÅÑ„ÇãÔºâ
        img.crossOrigin = 'anonymous';
        
        img.onload = () => {
            // ÁîªÂÉè„ÅåÊ≠£Â∏∏„Å´Ë™≠„ÅøËæº„Åæ„Çå„ÅüÂ†¥Âêà
            resolve(img);
        };
        
        img.onerror = (e) => {
            // Êµ∑Âüü„Å™„Å©ÁîªÂÉè„ÅåÂ≠òÂú®„Åó„Å™„ÅÑÂ†¥Âêà„ÅØnull„ÇíËøî„Åô
            resolve(null);
        };
        
        // „Çø„Ç§„É†„Ç¢„Ç¶„ÉàË®≠ÂÆöÔºà3ÁßíÔºâ
        setTimeout(() => {
            resolve(null);
        }, 3000);
        
        img.src = url;
    });
}


// ÊâãÈ†Ü4: loadGSITile„É°„ÇΩ„ÉÉ„Éâ„ÅÆÁõ¥Âæå„Å´‰ª•‰∏ã„ÅÆ2„Å§„ÅÆ„É°„ÇΩ„ÉÉ„Éâ„ÇíËøΩÂä†„Åó„Å¶„Åè„Å†„Åï„ÅÑ

// ÁµåÂ∫¶‚Üí„Çø„Ç§„É´XÂ∫ßÊ®ôÂ§âÊèõ
lonToTileX(lon, zoom) {
    return (lon + 180) / 360 * Math.pow(2, zoom);
}

// Á∑ØÂ∫¶‚Üí„Çø„Ç§„É´YÂ∫ßÊ®ôÂ§âÊèõ  
latToTileY(lat, zoom) {
    return (1 - Math.log(Math.tan(lat * Math.PI / 180) + 1 / Math.cos(lat * Math.PI / 180)) / Math.PI) / 2 * Math.pow(2, zoom);
}


// „Éá„Éê„ÉÉ„Ç∞Âº∑ÂåñÁâà rotateImageForThrow „É°„ÇΩ„ÉÉ„Éâ
rotateImageForThrow(originalImg, throwAngle) {
    console.log(`üîÑ ÁîªÂÉè„Çí${throwAngle}Â∫¶ÂõûËª¢‰∏≠...`);
    this.showDebug(`üîÑ ÁîªÂÉèÂõûËª¢ÈñãÂßã - ÂÖÉÁîªÂÉè:${originalImg.width}x${originalImg.height}, ËßíÂ∫¶:${throwAngle}Â∫¶`);
    
    const canvas = document.createElement('canvas');
    const diagonal = Math.sqrt(originalImg.width * originalImg.width + originalImg.height * originalImg.height);
    canvas.width = Math.ceil(diagonal);
    canvas.height = Math.ceil(diagonal);
    
    this.showDebug(`ÂõûËª¢Áî®„Ç≠„É£„É≥„Éê„Çπ‰ΩúÊàê - ${canvas.width}x${canvas.height}`);
    
    const ctx = canvas.getContext('2d');
    if (!ctx) {
        this.showDebug('‚ùå ÂõûËª¢Áî®„Ç≠„É£„É≥„Éê„Çπ„ÅÆ„Ç≥„É≥„ÉÜ„Ç≠„Çπ„ÉàÂèñÂæóÂ§±Êïó');
        return originalImg; // „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ
    }
    
    const centerX = canvas.width / 2;
    const centerY = canvas.height / 2;
    
    try {
        // ËÉåÊôØ„ÇíÁôΩ„ÅßÂ°ó„Çä„Å§„Å∂„ÅóÔºà„Éá„Éê„ÉÉ„Ç∞Áî®Ôºâ
        ctx.fillStyle = '#ffffff';
        ctx.fillRect(0, 0, canvas.width, canvas.height);
        
        ctx.translate(centerX, centerY);
        ctx.rotate((throwAngle * Math.PI) / 180);
        ctx.drawImage(originalImg, -originalImg.width / 2, -originalImg.height / 2, originalImg.width, originalImg.height);
        ctx.resetTransform();
        
        this.showDebug('‚úÖ „Ç≠„É£„É≥„Éê„ÇπÂõûËª¢ÊèèÁîªÂÆå‰∫Ü');
        
        const rotatedImg = new Image();
        rotatedImg.onload = () => {
            this.showDebug(`‚úÖ ÂõûËª¢ÁîªÂÉèImage„Ç™„Éñ„Ç∏„Çß„ÇØ„Éà‰ΩúÊàêÂÆå‰∫Ü - ${rotatedImg.naturalWidth}x${rotatedImg.naturalHeight}`);
        };
        rotatedImg.onerror = (e) => {
            this.showDebug(`‚ùå ÂõûËª¢ÁîªÂÉèImage„Ç™„Éñ„Ç∏„Çß„ÇØ„Éà‰ΩúÊàêÂ§±Êïó: ${e}`);
        };
        
        rotatedImg.src = canvas.toDataURL('image/png', 0.9);
        
        console.log('‚úÖ ÁîªÂÉèÂõûËª¢ÂÆå‰∫Ü');
        return rotatedImg;
        
    } catch (error) {
        this.showDebug(`‚ùå ÁîªÂÉèÂõûËª¢„Ç®„É©„Éº: ${error.message}`);
        return originalImg; // „Ç®„É©„ÉºÊôÇ„ÅØÂÖÉÁîªÂÉè„ÇíËøî„Åô
    }
}

createDirectionalAerialImage(throwAngle) {
    console.log(`üé® ÊñπÂêëÊÄß„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØÁîªÂÉèÁîüÊàêÔºà${throwAngle}Â∫¶Ôºâ`);
    
    const canvas = document.createElement('canvas');
    canvas.width = 1024;
    canvas.height = 1024;
    const ctx = canvas.getContext('2d');
    
    const directionRad = (throwAngle * Math.PI) / 180;
    
    // Âü∫Êú¨ËÉåÊôØ„Ç∞„É©„Éá„Éº„Ç∑„Éß„É≥
    const gradient = ctx.createLinearGradient(0, 0, Math.cos(directionRad) * 1024, Math.sin(directionRad) * 1024);
    gradient.addColorStop(0, '#2d5016');
    gradient.addColorStop(0.3, '#4a7c3a');
    gradient.addColorStop(0.6, '#8FBC8F');
    gradient.addColorStop(1, '#6b8e23');
    
    ctx.fillStyle = gradient;

    ctx.fillRect(0, 0, 1024, 1024);
    
    // „ÄêËøΩÂä†„ÄëÊäïÁêÉÊñπÂêë„Å´Ê≤ø„Å£„ÅüÈÅìË∑ØÈ¢®„Éë„Çø„Éº„É≥
ctx.strokeStyle = 'rgba(139, 69, 19, 0.4)';
ctx.lineWidth = 8;
for (let i = 0; i < 15; i++) {
    const offsetAngle = directionRad + (i - 7) * 0.3;  // ÊäïÁêÉÊñπÂêë„ÇíÂü∫Ê∫ñ„Å´ÊîæÂ∞ÑÁä∂
    const startX = 512 + Math.cos(offsetAngle + Math.PI) * 400;  // ‰∏≠ÂøÉ„Åã„ÇâÂ§ñÂÅ¥„Å∏
    const startY = 512 + Math.sin(offsetAngle + Math.PI) * 400;
    const endX = 512 + Math.cos(offsetAngle) * 400;
    const endY = 512 + Math.sin(offsetAngle) * 400;
    
    ctx.beginPath();
    ctx.moveTo(startX, startY);
    ctx.lineTo(endX, endY);
    ctx.stroke();
}

// „ÄêËøΩÂä†„ÄëÂª∫Áâ©È¢®„ÅÆÁü©ÂΩ¢
ctx.fillStyle = 'rgba(128, 128, 128, 0.6)';
for (let i = 0; i < 30; i++) {
    const x = Math.random() * 1024;           // „É©„É≥„ÉÄ„É†XÂ∫ßÊ®ô
    const y = Math.random() * 1024;           // „É©„É≥„ÉÄ„É†YÂ∫ßÊ®ô
    const w = Math.random() * 50 + 20;        // ÂπÖ20-70px
    const h = Math.random() * 50 + 20;        // È´ò„Åï20-70px
    ctx.fillRect(x, y, w, h);
}

// „ÄêËøΩÂä†„ÄëÊ∞¥ÂüüÈ¢®„ÅÆÈùí„ÅÑ„Ç®„É™„Ç¢  
ctx.fillStyle = 'rgba(64, 164, 223, 0.3)';
for (let i = 0; i < 5; i++) {
    const x = Math.random() * 800 + 100;     // ‰∏≠Â§ÆÂØÑ„Çä„ÅÆXÂ∫ßÊ®ô
    const y = Math.random() * 800 + 100;     // ‰∏≠Â§ÆÂØÑ„Çä„ÅÆYÂ∫ßÊ®ô
    const radius = Math.random() * 80 + 40;  // ÂçäÂæÑ40-120px
    
    ctx.beginPath();
    ctx.arc(x, y, radius, 0, 2 * Math.PI);
    ctx.fill();
}

    
    const img = new Image();


    img.src = canvas.toDataURL();
    return img;
}
    
// Âü∫Êú¨„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØÁîªÂÉèÁîüÊàê
createBasicFallbackImage() {
    const canvas = document.createElement('canvas');
    canvas.width = 1024;
    canvas.height = 1024;
    const ctx = canvas.getContext('2d');
    
    // „Ç∑„É≥„Éó„É´„Å™Á∑ëËâ≤„ÅÆËÉåÊôØ
    ctx.fillStyle = '#228B22';
    ctx.fillRect(0, 0, 1024, 1024);
    
    // Ê†ºÂ≠ê„Éë„Çø„Éº„É≥
    ctx.strokeStyle = 'rgba(255, 255, 255, 0.2)';
    ctx.lineWidth = 2;
    for (let i = 0; i <= 1024; i += 64) {
        ctx.beginPath();
        ctx.moveTo(i, 0);
        ctx.lineTo(i, 1024);
        ctx.stroke();
        
        ctx.beginPath();
        ctx.moveTo(0, i);
        ctx.lineTo(1024, i);
        ctx.stroke();
    }
    
    // ‰∏≠Â§Æ„Å´„É°„ÉÉ„Çª„Éº„Ç∏
    ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';
    ctx.font = 'bold 48px Arial';
    ctx.textAlign = 'center';
    ctx.fillText('„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØÁîªÂÉè', 512, 512);
    
    const img = new Image();
    img.src = canvas.toDataURL();
    return img;
}


// „ÄêÂº∑ÂåñÁâà„ÄëstartBallMovement
async startBallMovement() {
    // „Åì„Åì„ÅßÂàù„ÇÅ„Å¶Áä∂ÊÖã„Éï„É©„Ç∞„ÇíË®≠ÂÆö
    this.isActive = true;
    this.isBallMoving = true;
    
    this.showDebug('üöÄ „Éú„Éº„É´ÁßªÂãïÈñãÂßã');
    
    this.debugCanvasState();
    this.debugAerialImageState();
    
    if (!this.ctx) {
        this.showDebug('‚ö†Ô∏è CanvasÂÜçÂàùÊúüÂåñ‰∏≠...');
        if (!this.initCanvas()) {
            this.showDebug('‚ùå CanvasÂàùÊúüÂåñÂ§±Êïó‚ÜíÁùÄÂú∞Âá¶ÁêÜ');
            this.landBall();
            return;
        }
    }
    
    this.mapElement.style.display = 'none';
    this.gameCanvas.style.display = 'block';
    this.ballElement.style.display = 'none';
    
    this.animationFrame = 0;
    this.backgroundOffsetY = 0;
    
    this.updateStatus(`üèÄ „Éú„Éº„É´ÊäïÁêÉ‰∏≠... ÊñπÂêë: ${this.getCompassDirection(this.throwAngle)} (${Math.round(this.throwAngle)}¬∞)`);
    
    // Èü≥Â£∞ÂÜçÁîü
    this.showDebug('üîä Èü≥Â£∞ÂÜçÁîüÈñãÂßã');
    this.playKickSound();
    
    this.animateCanvasThrow();
}
    
    // „Ç≠„ÉÉ„ÇØÈü≥ÂÜçÁîüÔºàÂ∞ÇÁî®„É°„ÇΩ„ÉÉ„ÉâÔºâ
    playKickSound() {
        const kickAudio = this.sounds.kick;
        console.log('üîä „Ç≠„ÉÉ„ÇØÈü≥ÂÜçÁîüÈñãÂßã');
        
        try {

            // Èü≥Â£∞„Éï„Ç°„Ç§„É´„ÅÆÁä∂ÊÖã„Çí„ÉÅ„Çß„ÉÉ„ÇØ
            console.log('üéµ Èü≥Â£∞Áä∂ÊÖã:', {
                readyState: kickAudio.readyState,
                networkState: kickAudio.networkState,
                src: kickAudio.src,
                duration: kickAudio.duration
            });


            //ÂÜçÁîü‰ΩçÁΩÆ„Çí„É™„Çª„ÉÉ„Éà
            kickAudio.currentTime = 0;
            kickAudio.volume = 1.0;
            
            const playPromise = kickAudio.play();
            
            if (playPromise !== undefined) {
                playPromise
                    .then(() => {
                        console.log('‚úÖ „Ç≠„ÉÉ„ÇØÈü≥ÂÜçÁîüÊàêÂäüÔºÅ');
                    })
                    .catch(error => {
                        console.error('‚ùå „Ç≠„ÉÉ„ÇØÈü≥ÂÜçÁîüÂ§±Êïó:', error);
                        this.fallbackPlayKickSound();
                    });
            } else {
                console.log('‚úÖ „Ç≠„ÉÉ„ÇØÈü≥ÂÜçÁîüÈñãÂßãÔºàPromiseÊú™„Çµ„Éù„Éº„ÉàÔºâ');
            }

            // ÂÜçÁîüÁ¢∫Ë™çÁî®„ÅÆ„Çø„Ç§„Éû„Éº
            setTimeout(() => {
                if (kickAudio.currentTime > 0) {
                    console.log('‚úÖ „Ç≠„ÉÉ„ÇØÈü≥Ê≠£Â∏∏ÂÜçÁîü‰∏≠ - ÊôÇÈñì:', kickAudio.currentTime);
                } else {
                    console.warn('‚ö†Ô∏è „Ç≠„ÉÉ„ÇØÈü≥ÂÜçÁîü„Åï„Çå„Å¶„ÅÑ„Å™„ÅÑÂèØËÉΩÊÄß„Åå„ÅÇ„Çä„Åæ„Åô');
                    this.fallbackPlayKickSound();
                }
            }, 100);
            
        } catch (error) {
            console.error('‚ùå „Ç≠„ÉÉ„ÇØÈü≥ÂÜçÁîü„Ç®„É©„Éº:', error);
            this.fallbackPlayKickSound();
        }
    }
    
    // „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØÈü≥Â£∞ÂÜçÁîü
    fallbackPlayKickSound() {
        console.log('üîÑ „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØÈü≥Â£∞ÂÜçÁîü„ÇíË©¶Ë°å');
        
        try {
            const fallbackAudio = new Audio('kick.mp3');
            fallbackAudio.volume = 1.0;
            fallbackAudio.play()
                .then(() => console.log('‚úÖ „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØÈü≥Â£∞ÂÜçÁîüÊàêÂäü'))
                .catch(e => console.log('‚ö†Ô∏è „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØÈü≥Â£∞„ÇÇÂ§±Êïó:', e));
        } catch (e) {
            console.log('‚ö†Ô∏è „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØÈü≥Â£∞‰ΩúÊàêÂ§±Êïó:', e);
        }
    }
    
    // CanvasÊèèÁîª„Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥Ôºà1„Ç≠„É≠ÂõõÊñπÁâàÔºâ
    animateCanvasThrow() {
        // Áä∂ÊÖã„ÉÅ„Çß„ÉÉ„ÇØ„ÇíËøΩÂä†
        if (!this.isActive || !this.isBallMoving || !this.ctx) {
            console.log('‚ùå „Ç≠„É£„É≥„Éê„Çπ„Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥ÂÅúÊ≠¢ - Áä∂ÊÖãÁï∞Â∏∏');
            return;
        }
        
        this.animationFrame++;
        const progress = this.animationFrame * 0.005; // „Çπ„ÇØ„É≠„Éº„É´ÈÄüÂ∫¶„ÇíË™øÊï¥

if (progress >= 1) {
    console.log('‚úÖ „Ç≠„É£„É≥„Éê„Çπ„Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥ÂÆå‰∫Ü„ÄÅÁùÄÂú∞Âá¶ÁêÜÈñãÂßã');
    this.landBall();

    return;
}
        // ÊäïÁêÉË∑ùÈõ¢„ÅÆÊõ¥Êñ∞
        const currentDistance = this.throwPower * progress;
        
        // „Éú„Éº„É´‰ΩçÁΩÆÊõ¥Êñ∞ÔºàÂÆüÈöõ„ÅÆÂú∞ÁêÜÁöÑÁßªÂãïÔºâ
        const bearing = this.throwAngle * Math.PI / 180;
        const earthRadius = 6371000;
        
        const lat1 = this.startPosition.lat * Math.PI / 180;
        const lng1 = this.startPosition.lng * Math.PI / 180;
        
        const lat2 = Math.asin(
            Math.sin(lat1) * Math.cos(currentDistance / earthRadius) +
            Math.cos(lat1) * Math.sin(currentDistance / earthRadius) * Math.cos(bearing)
        );
        
        const lng2 = lng1 + Math.atan2(
            Math.sin(bearing) * Math.sin(currentDistance / earthRadius) * Math.cos(lat1),
            Math.cos(currentDistance / earthRadius) - Math.sin(lat1) * Math.sin(lat2)
        );
        
        this.ballPosition = {
            lat: lat2 * 180 / Math.PI,
            lng: lng2 * 180 / Math.PI
        };
        
        // CanvasÊèèÁîª
        try {
            this.ctx.clearRect(0, 0, this.canvasWidth, this.canvasHeight);
        } catch (error) {
            console.error('‚ùå Canvas clear failed:', error);
            this.landBall();
            return;
        }
        
        // 1„Ç≠„É≠ÂõõÊñπ„ÅÆËÉåÊôØ„Çí‰∏ãÊñπÂêë„Å´„Çπ„ÇØ„É≠„Éº„É´
        this.drawBackground(currentDistance, progress);
        this.drawCanvasBall(progress);
        
        // Ë∑ùÈõ¢Ë°®Á§∫Êõ¥Êñ∞
        const realDistance = this.calculateDistance(
            this.startPosition.lat, this.startPosition.lng,
            this.ballPosition.lat, this.ballPosition.lng
        );
        document.getElementById('distance').textContent = Math.round(realDistance) + 'm';
        this.updateCoordinatesDisplay();
        
        requestAnimationFrame(() => this.animateCanvasThrow());
    }
    

// „ÄêimageSizeÂü∫Ê∫ñÁâà„ÄëimageSize„ÅßÊ±∫„Åæ„Å£„Åü„Çµ„Ç§„Ç∫„ÅßÊèèÁîª
drawBackground(currentDistance, progress) {
    if (!this.ctx || !this.aerialImages.length || !this.aerialImages[0].image) {
        this.showDebug(`‚ùå ÊèèÁîªÂâç„ÉÅ„Çß„ÉÉ„ÇØÂ§±Êïó - ctx:${!!this.ctx}, ÁîªÂÉèÊï∞:${this.aerialImages.length}`);
        this.drawFallbackBackground(progress);
        return;
    }
    
    try {
        this.ctx.save();
        
        const aerialImage = this.aerialImages[0].image;
        
        // ÁîªÂÉèË™≠„ÅøËæº„ÅøÁä∂ÊÖã„ÉÅ„Çß„ÉÉ„ÇØ
        if (!aerialImage.complete || aerialImage.naturalWidth === 0) {
            this.showDebug('‚ö†Ô∏è ÁîªÂÉèÊú™Ë™≠„ÅøËæº„Åø‚Üí„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ');
            this.drawFallbackBackground(progress);
            this.ctx.restore();
            return;  
        }

        // „Äê‰øÆÊ≠£„ÄëÁîªÂÉè„ÇíÂÖÉ„ÅÆ„Çµ„Ç§„Ç∫„ÅÆ„Åæ„Åæ‰ΩøÁî®ÔºàÁ∏ÆÂ∞è„Å™„ÅóÔºâ
        const imageWidth = aerialImage.naturalWidth;
        const imageHeight = aerialImage.naturalHeight;
        const imageWidth = originalWidth * 2;  // ‚Üê 2ÂÄç„Å´Êã°Â§ß
        const imageHeight = originalHeight * 2; // ‚Üê 2ÂÄç„Å´Êã°Â§ß


        // „Ç≠„É£„É≥„Éê„Çπ„Çµ„Ç§„Ç∫„Å´Âøú„Åò„Å¶ÁîªÂÉè„Çµ„Ç§„Ç∫„ÇíË™øÊï¥Ôºà„Éë„ÉØ„Éº„ÅåÂ§ß„Åç„ÅÑ„Åª„Å©ÁîªÂÉè„ÇÇÂ§ß„Åç„ÅèË°®Á§∫Ôºâ
        const canvasScale = Math.max(this.canvasWidth / 800, this.canvasHeight / 600); // Âü∫Ê∫ñ„Çµ„Ç§„Ç∫ÊØî
        const adjustedImageWidth = imageWidth * canvasScale;
        const adjustedImageHeight = imageHeight * canvasScale;


        // „Ç≠„É£„É≥„Éê„Çπ„ÅÆ‰∏≠Â§Æ„Å´ÁîªÂÉè„ÇíÈÖçÁΩÆ
        const centerX = (this.canvasWidth - adjustedImageWidth) / 2;
        const centerY = (this.canvasHeight - adjustedImageHeight) / 2;
        
        // „Äê‰øÆÊ≠£„Äë‰∏ãÊñπÂêë„Çπ„ÇØ„É≠„Éº„É´Ë®àÁÆó
        // ÁîªÂÉè„Åå„Ç≠„É£„É≥„Éê„Çπ„Çà„ÇäÂ§ß„Åç„ÅÑÂ†¥Âêà„ÅÆ„Åø„Çπ„ÇØ„É≠„Éº„É´ÂèØËÉΩ
        const scrollFactor = 0.7; // „Çπ„ÇØ„É≠„Éº„É´Èáè„Çí30%„Å´Âà∂Èôê
        const maxScroll = Math.max(0, imageHeight - this.canvasHeight);
        const scrollY = centerY + progress * maxScroll * scrollFactor;
        
        // „Éá„Éê„ÉÉ„Ç∞ÊÉÖÂ†±Ôºà10„Éï„É¨„Éº„É†„Å´1Âõû„ÅÆ„ÅøÔºâ
        if (this.animationFrame % 10 === 0) {
            this.showDebug(`üìä ‰∏ã„Çπ„ÇØ„É≠„Éº„É´: ${Math.round(progress*100)}%`);
            this.showDebug(`  - ÁîªÂÉè„Çµ„Ç§„Ç∫: ${imageWidth}x${imageHeight}`);
            this.showDebug(`  - maxScroll: ${Math.round(maxScroll)}px`);
            this.showDebug(`  - scrollY: ${Math.round(scrollY)}px`);
        }

        // ËÉåÊôØ„ÇØ„É™„Ç¢
        this.ctx.fillStyle = '#000000';
        this.ctx.fillRect(0, 0, this.canvasWidth, this.canvasHeight);

        // „Äê‰øÆÊ≠£„ÄëËà™Á©∫ÂÜôÁúü„ÇíÂÖÉ„Çµ„Ç§„Ç∫„ÅßÊèèÁîªÔºà‰∏ãÊñπÂêë„Çπ„ÇØ„É≠„Éº„É´Ôºâ
        this.ctx.drawImage(
            aerialImage, 
            centerX,     // X‰ΩçÁΩÆÔºà‰∏≠Â§ÆÂØÑ„ÅõÔºâ
            scrollY,     // Y‰ΩçÁΩÆÔºà‰∏ãÊñπÂêë„Çπ„ÇØ„É≠„Éº„É´Ôºâ
            adjustedImageWidth,   // Ë™øÊï¥„Åï„Çå„ÅüÂπÖ
            adjustedImageHeight   // Ë™øÊï¥„Åï„Çå„ÅüÈ´ò„Åï
        );

        // „ÄêËøΩÂä†„Äë„Çπ„ÇØ„É≠„Éº„É´Á¢∫Ë™çÁî®„ÅÆÂ¢ÉÁïåÁ∑ö
        this.ctx.strokeStyle = '#00ff00';
        this.ctx.lineWidth = 2;
        this.ctx.strokeRect(centerX, scrollY, imageWidth, imageHeight);

        // ÈÄ≤Ë°åÂ∫¶„Å®ÊÉÖÂ†±Ë°®Á§∫
        this.ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';
        this.ctx.font = 'bold 18px Arial';
        this.ctx.textAlign = 'center';
        this.ctx.fillText(
            `üõ∞Ô∏è Ëà™Á©∫ÂÜôÁúü ${Math.round(progress * 100)}%`, 
            this.canvasWidth / 2, 
            40
        );

        // ÁîªÂÉèÊÉÖÂ†±„Å®„Çπ„ÇØ„É≠„Éº„É´‰ΩçÁΩÆË°®Á§∫
        this.ctx.font = 'bold 14px Arial';
        this.ctx.fillText(
            `ÁîªÂÉè: ${imageWidth}x${imageHeight}px „Çπ„ÇØ„É≠„Éº„É´: ${Math.round(-scrollY)}/${Math.round(maxScroll)}px`, 
            this.canvasWidth / 2, 
            70
        );

        // „Çπ„ÇØ„É≠„Éº„É´ÂèØËÉΩÁØÑÂõ≤„ÅÆË≠¶ÂëäË°®Á§∫
        if (maxScroll === 0) {
            this.ctx.fillStyle = 'rgba(255, 255, 0, 0.9)';
            this.ctx.fillText(
                '‚ö†Ô∏è ÁîªÂÉè„ÅåÂ∞è„Åï„Åô„Åé„Å¶„Çπ„ÇØ„É≠„Éº„É´„Åß„Åç„Åæ„Åõ„Çì', 
                this.canvasWidth / 2, 
                100
            );
        }

        this.ctx.restore();
        
    } catch (error) {
        this.showDetailedError('ËÉåÊôØÊèèÁîª', error);
        this.drawFallbackBackground(progress);
        this.ctx.restore();
    }
}


    
    // Canvas‰∏ä„Åß„ÅÆ„Éú„Éº„É´ÊèèÁîªÔºàÊîπÂñÑÁâàÔºâ
    drawCanvasBall(progress) {
        if (!this.ctx) return;
        
        try {
            let scale;
            if (progress <= 0.5) {
                scale = 1 + progress * 3;
            } else {
                scale = 4 - (progress - 0.5) * 3;
            }
            scale = Math.max(0.5, Math.min(4, scale));
            
            const ballRadius = 30 * scale;
            
            // „Éú„Éº„É´„ÅÆÂΩ±
            this.ctx.save();
            this.ctx.globalAlpha = 0.3;
            this.ctx.fillStyle = '#000';
            this.ctx.beginPath();
            this.ctx.arc(
                this.ballCanvasX + 5,
                this.ballCanvasY + 5,
                ballRadius * 0.8,
                0, 2 * Math.PI
            );
            this.ctx.fill();
            this.ctx.restore();
            
            // „Éú„Éº„É´ÁîªÂÉèÊèèÁîª
            if (this.ballImage && this.ballImage.complete && this.ballImage.naturalWidth > 0) {
                try {
                    const ballSize = ballRadius * 2;
                    
                    this.ctx.save();
                    
                    this.ctx.translate(this.ballCanvasX, this.ballCanvasY);
                    this.ctx.rotate((progress * 360 * 4) * Math.PI / 180);
                    
                    this.ctx.drawImage(
                        this.ballImage,
                        -ballSize / 2,
                        -ballSize / 2,
                        ballSize,
                        ballSize
                    );
                    
                    this.ctx.restore();
                    
                    console.log(`üèÄ „Éú„Éº„É´ÁîªÂÉèÊèèÁîªÊàêÂäü („Çπ„Ç±„Éº„É´: ${scale.toFixed(2)}x)`);
                    
                } catch (error) {
                    console.error('‚ùå „Éú„Éº„É´ÁîªÂÉèÊèèÁîª„Ç®„É©„Éº:', error);
                    this.drawFallbackBall(ballRadius);
                }
            } else {
                console.log('üü† „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ„Éú„Éº„É´ÊèèÁîª');
                this.drawFallbackBall(ballRadius);
            }
            
        } catch (error) {
            console.error('‚ùå „Éú„Éº„É´ÊèèÁîªÂÖ®Ëà¨„Ç®„É©„Éº:', error);
        }
    }
    
    // „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ„Éú„Éº„É´ÊèèÁîª
    drawFallbackBall(ballRadius) {
        if (!this.ctx) return;
        
        try {
            const gradient = this.ctx.createRadialGradient(
                this.ballCanvasX - ballRadius * 0.3,
                this.ballCanvasY - ballRadius * 0.3,
                0,
                this.ballCanvasX,
                this.ballCanvasY,
                ballRadius
            );
            gradient.addColorStop(0, '#ff8a65');
            gradient.addColorStop(0.7, '#ff5722');
            gradient.addColorStop(1, '#d84315');
            
            this.ctx.fillStyle = gradient;
            this.ctx.beginPath();
            this.ctx.arc(this.ballCanvasX, this.ballCanvasY, ballRadius, 0, 2 * Math.PI);
            this.ctx.fill();
            
            this.ctx.fillStyle = '#ffccbc';
            this.ctx.beginPath();
            this.ctx.arc(
                this.ballCanvasX - ballRadius * 0.3,
                this.ballCanvasY - ballRadius * 0.3,
                ballRadius * 0.2,
                0, 2 * Math.PI
            );
            this.ctx.fill();
            
            this.ctx.strokeStyle = '#bf360c';
            this.ctx.lineWidth = 2;
            this.ctx.beginPath();
            this.ctx.arc(this.ballCanvasX, this.ballCanvasY, ballRadius, 0, 2 * Math.PI);
            this.ctx.stroke();
            
        } catch (error) {
            console.error('‚ùå „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ„Éú„Éº„É´ÊèèÁîª„Ç®„É©„Éº:', error);
        }
    }
    
    // „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØËÉåÊôØÊèèÁîªÔºàÊîπÂñÑÁâàÔºâ
   rawFallbackBackground
    
    clearTrails() {
        const trails = document.querySelectorAll('.ball-trail');
        trails.forEach(trail => trail.remove());
    }
    
    createTrail(x, y) {
        const trail = document.createElement('div');
        trail.className = 'ball-trail';
        trail.style.left = x + 'px';
        trail.style.top = y + 'px';
        document.body.appendChild(trail);
        
        setTimeout(() => {
            if (trail.parentNode) {
                trail.parentNode.removeChild(trail);
            }
        }, 2000);
    }
    
    async landBall() {
        this.isActive = false;
        this.isBallMoving = false;
        
        console.log('üéØ ÁùÄÂú∞Âá¶ÁêÜÈñãÂßã');
        
        this.gameCanvas.style.display = 'none';
        this.mapElement.style.display = 'block';
        this.ballElement.style.display = 'block';
        
        this.playSound('goal');
        
        this.ballElement.classList.remove('throwing', 'flying');
        this.ballElement.style.transform = 'translate(-50%, -50%) scale(1)';
        
        const finalDistance = Math.round(this.calculateDistance(
            this.startPosition.lat, this.startPosition.lng,
            this.ballPosition.lat, this.ballPosition.lng
        ));
        
        console.log('‚úÖ ÊúÄÁµÇË∑ùÈõ¢:', finalDistance + 'm');
        
        if (this.map) {
            try {
                this.map.setCenter(this.ballPosition);
                
                let currentZoom = this.map.getZoom() || 10;
                const targetZoom = 19;
                const zoomSteps = 30;
                const zoomIncrement = (targetZoom - currentZoom) / zoomSteps;
                
                let step = 0;
                const zoomInterval = setInterval(() => {
                    step++;
                    currentZoom += zoomIncrement;
                    
                    if (step >= zoomSteps) {
                        currentZoom = targetZoom;
                        clearInterval(zoomInterval);
                    }
                    
                    this.map.setZoom(Math.round(currentZoom));
                }, 100);
                
                setTimeout(() => {
                    this.map.setHeading(0);
                }, 3000);
                
            } catch (e) {
                console.warn('‚ùå ÁùÄÂú∞ÊôÇÂú∞Âõ≥Êõ¥Êñ∞„Ç®„É©„Éº:', e);
            }
        }
        
        document.getElementById('distance').textContent = finalDistance + 'm';
        
        setTimeout(() => {
            this.clearTrails();
        }, 3000);
        
        this.updateStatus(`üéØ ÁùÄÂú∞ÂÆå‰∫ÜÔºÅÈ£õË∑ùÈõ¢: ${finalDistance}m ÊñπÂêë: ${this.getCompassDirection(this.throwAngle)}`);
        
        setTimeout(() => {
            this.showLandingPanel(finalDistance, this.ballPosition);
        }, 4000);
    }
    
    showLandingPanel(distance, position) {
        document.getElementById('infoPanel').style.display = 'none';
        
        const landingPanel = document.getElementById('landingPanel');
        const results = document.getElementById('results');
        const googleMapBtn = document.getElementById('googleMapBtn');
        const resetBtn = document.getElementById('resetBtn');
        
        results.innerHTML = `üéØ ÁùÄÂú∞ÂÆå‰∫ÜÔºÅ<br>È£õË∑ùÈõ¢: ${distance}m`;
        
        const googleMapUrl = `https://www.google.com/maps?q=${position.lat},${position.lng}&z=18&t=k`;
        googleMapBtn.href = googleMapUrl;
        
        resetBtn.onclick = () => this.reset();
        
        landingPanel.style.display = 'block';
    }
    
    updateStatus(message) {
        document.getElementById('status').textContent = message;
    }
    
    // Èü≥Â£∞ÂÜçÁîüÔºàÊîπÂñÑÁâàÔºâ
    playSound(soundName) {
        console.log(`üîä Èü≥Â£∞ÂÜçÁîüË©¶Ë°å: ${soundName}`);
        if (this.sounds[soundName]) {
            try {
                const audio = this.sounds[soundName];
                
                audio.currentTime = 0;
                audio.volume = 1.0;
                
                const playPromise = audio.play();
                
                if (playPromise !== undefined) {
                    playPromise
                        .then(() => {
                            console.log(`‚úÖ ${soundName} Èü≥Â£∞ÂÜçÁîüÊàêÂäü`);
                        })
                        .catch(error => {
                            console.error(`‚ùå ${soundName} Èü≥Â£∞ÂÜçÁîüÂ§±Êïó:`, error);
                            
                            try {
                                const fallbackAudio = new Audio(audio.src);
                                fallbackAudio.volume = 1.0;
                                fallbackAudio.play()
                                    .then(() => console.log(`‚úÖ ${soundName} „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØÂÜçÁîüÊàêÂäü`))
                                    .catch(e => console.log(`‚ö†Ô∏è ${soundName} „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ„ÇÇÂ§±Êïó:`, e));
                            } catch (e) {
                                console.log(`‚ö†Ô∏è ${soundName} „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ‰ΩúÊàêÂ§±Êïó:`, e);
                            }
                        });
                }
            } catch (e) {
                console.error(`‚ùå ${soundName} Èü≥Â£∞„Ç®„É©„Éº:`, e);
            }
        } else {
            console.warn(`‚ùå Èü≥Â£∞ ${soundName} „ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì`);
        }
    }
    
    reset() {
    console.log('üîÑ „É™„Çª„ÉÉ„ÉàÈñãÂßã');
    
    if (this.countdownTimer) {
        clearInterval(this.countdownTimer);
        this.countdownTimer = null;
    }
    if (this.preparationTimer) {
        clearInterval(this.preparationTimer);
        this.preparationTimer = null;
    }
    
    this.hideCountdown();
    this.hideResourcePreparation();
    
    this.isActive = false;
    this.isCountdownActive = false;
    this.isBallMoving = false;
    this.isDetectingShake = false;
    
    this.accelerationData = [];
    this.maxAcceleration = 0;
    this.totalDistance = 0;
    this.backgroundOffsetY = 0;
    
    // ‰øÆÊ≠£: „É™„Çª„ÉÉ„ÉàÊôÇ„Å´Ê∫ñÂÇôÁä∂ÊÖã„ÇÇ„É™„Çª„ÉÉ„Éà
    this.isAudioReady = false;
    this.isAerialImagesReady = false;
    this.isBallImageReady = false;
    
    // „ÄêËøΩÂä†„Äë„Ç≠„É£„É≥„Éê„Çπ„Çµ„Ç§„Ç∫„ÇíÂü∫Êú¨„Çµ„Ç§„Ç∫„Å´„É™„Çª„ÉÉ„Éà
    if (this.gameCanvas) {
        const container = this.gameCanvas.parentElement;
        if (container) {

            // „Ç≠„É£„É≥„Éê„Çπ„ÅØÂ∏∏„Å´ÁîªÈù¢„Çµ„Ç§„Ç∫
            this.canvasWidth = container.clientWidth;
            this.canvasHeight = container.clientHeight;
            
            this.gameCanvas.width = this.canvasWidth;
            this.gameCanvas.height = this.canvasHeight;
            
            // Ë°®Á§∫„Çµ„Ç§„Ç∫„ÇÇ„É™„Çª„ÉÉ„Éà
            this.gameCanvas.style.width = this.canvasWidth + 'px';
            this.gameCanvas.style.height = this.canvasHeight + 'px';
            
            this.ballCanvasX = this.canvasWidth / 2;
            this.ballCanvasY = this.canvasHeight / 2;
            
            this.showDebug(`üîÑ „Ç≠„É£„É≥„Éê„Çπ„Çµ„Ç§„Ç∫„É™„Çª„ÉÉ„Éà: ${this.canvasWidth}x${this.canvasHeight}px`);
        }
        
        this.gameCanvas.style.display = 'none';
    }
    
    if (this.mapElement) {
        this.mapElement.style.display = 'block';
    }
    
    this.ballElement.style.display = 'block';
    this.ballElement.classList.remove('throwing', 'flying');
    this.ballElement.style.transform = 'translate(-50%, -50%) scale(1)';
    
    document.getElementById('powerMeter').style.display = 'none';
    document.getElementById('powerFill').style.height = '0%';
    
    this.clearTrails();
    this.ballPosition = { ...this.startPosition };
    this.loadBallImage();
    
    if (this.isMapReady) {
        this.mapElement.style.transform = `rotate(${-this.heading}deg)`;
    }
    
    if (this.map && this.startPosition) {
        try {
            this.map.setCenter(this.startPosition);
            this.map.setZoom(20);
            this.map.setMapTypeId(google.maps.MapTypeId.SATELLITE);
            this.map.setHeading(0);
        } catch (e) {
            console.warn('‚ùå Âú∞Âõ≥„É™„Çª„ÉÉ„Éà„Ç®„É©„Éº:', e);
        }
    }
    
    document.getElementById('landingPanel').style.display = 'none';
    document.getElementById('infoPanel').style.display = 'block';
    
    document.getElementById('distance').textContent = '0m';
    document.getElementById('speed').textContent = '---';
    
    this.updateCoordinatesDisplay();
    this.updateStatus('üéØ ÊäïÁêÉÊ∫ñÂÇôÂÆå‰∫ÜÔºÅ„Çπ„Çø„Éº„Éà„Éú„Çø„É≥„ÇíÊäº„Åó„Å¶„Åè„Å†„Åï„ÅÑ');
    
    const startBtn = document.getElementById('startBtn');
    startBtn.textContent = 'üöÄ „Çπ„Çø„Éº„Éà';
    startBtn.disabled = false;
    startBtn.classList.add('countdown-ready');
    startBtn.onclick = () => this.startCountdown();
}
    
    showError(message) {
        const errorDiv = document.createElement('div');
        errorDiv.className = 'error-message';
        errorDiv.innerHTML = `
            <div style="font-size: 20px; margin-bottom: 15px;">‚ö†Ô∏è</div>
            <strong>„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü</strong><br><br>
            ${message}<br><br>
            <button onclick="location.reload()" style="
                padding: 12px 20px; 
                background: white; 
                color: #d32f2f; 
                border: 2px solid #d32f2f; 
                border-radius: 8px; 
                cursor: pointer;
                font-weight: bold;
            ">
                üîÑ ÂÜçË™≠„ÅøËæº„Åø
            </button>
        `;
        document.body.appendChild(errorDiv);
        
        setTimeout(() => {
            if (errorDiv.parentNode) {
                errorDiv.parentNode.removeChild(errorDiv);
            }
        }, 10000);
    }
}

// Global app instance
let app = null;


// „Ç∞„É≠„Éº„Éê„É´Èñ¢Êï∞„Å®„Åó„Å¶ startApp „ÇíÂÆöÁæ©
function startApp() {
    console.log('üöÄ startApp called');
    
    const startBtn = document.getElementById('startBtn');
    if (!startBtn) {
        console.error('‚ùå Start button not found');
        return;
    }
    

    // ÈáçË§áÂÆüË°åÈò≤Ê≠¢
    if (startBtn.disabled) {
        console.log('‚ö†Ô∏è Button already disabled');
        return;
    }

    startBtn.disabled = true;
    startBtn.textContent = 'ÂàùÊúüÂåñ‰∏≠...';

    // „Ç¢„Éó„É™„Ç§„É≥„Çπ„Çø„É≥„Çπ‰ΩúÊàê
    if (!app) {
        app = new BallThrowJourneyApp();
    }
    
    // Èü≥Â£∞Ê∫ñÂÇô
    Object.values(app.sounds).forEach(audio => {
        try { audio.load(); } catch (e) { console.warn('Audio load failed'); }
    });

    // „Ç¢„Éó„É™ÈñãÂßã
    app.startApp();
}


// DOMË™≠„ÅøËæº„ÅøÂÆå‰∫ÜÊôÇ„ÅÆÂá¶ÁêÜ
document.addEventListener('DOMContentLoaded', function() {
    console.log('üöÄ DOM loaded');
    
    // HTML„Å´onclickÂ±ûÊÄß„Åå„Å™„ÅÑÂ†¥Âêà„ÅØ„ÄÅ„Åì„Åì„Åß„Ç§„Éô„É≥„Éà„É™„Çπ„Éä„Éº„ÇíË®≠ÂÆö
    const startBtn = document.getElementById('startBtn');
    if (startBtn) {
        startBtn.addEventListener('click', startApp);
    }
});