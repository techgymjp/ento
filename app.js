class BallThrowJourneyApp {
    constructor() {
        console.log('üöÄ BallThrowJourneyApp initializing...');
        
        // Core elements
        this.map = null;
        this.mapElement = document.getElementById('map');
        this.ballElement = document.getElementById('ball');
        this.compassNeedle = document.getElementById('compassNeedle');
        this.gameCanvas = document.getElementById('gameCanvas');
        this.ctx = null;
        
        // Canvas and image data
        this.aerialImages = [];
        this.ballImage = null;
        this.canvasWidth = 0;
        this.canvasHeight = 0;
        this.ballCanvasX = 0;
        this.ballCanvasY = 0;
        this.backgroundOffsetY = 0;
        
        // Audio elements
        this.sounds = {
            start: new Audio('start.mp3'),
            kick: new Audio('kick.mp3'),
            goal: new Audio('goal.mp3')
        };
        
        // Preload audio files
        Object.values(this.sounds).forEach(audio => {
            audio.preload = 'auto';
            audio.volume = 0.8;
            audio.addEventListener('canplaythrough', () => {
                console.log(`‚úÖ Audio ${audio.src} loaded successfully`);
            });
            audio.addEventListener('error', (e) => {
                console.error(`‚ùå Audio ${audio.src} failed to load:`, e);
            });
        });
        
        // State management
        this.isActive = false;
        this.isCountdownActive = false;
        this.isPermissionGranted = false;
        this.isMapReady = false;
        this.isMapFullyLoaded = false;
        this.isBallMoving = false;
        this.isDetectingShake = false;
        
        // Position data
        this.currentPosition = { lat: 35.4476, lng: 139.6425 };
        this.startPosition = { ...this.currentPosition };
        this.ballPosition = { ...this.currentPosition };
        
        // Sensor data
        this.heading = 0;
        this.absoluteHeading = 0;
        this.tilt = 0;
        this.lastTilt = 0;
        this.tiltSpeed = 0;
        this.lastTime = Date.now();
        
        // Shake detection
        this.accelerationData = [];
        this.maxAcceleration = 0;
        this.shakeThreshold = 12;
        this.totalDistance = 0;
        
        // Animation
        this.animationFrame = 0;
        this.throwPower = 0;
        this.throwAngle = 0;
        this.ballTrailPoints = [];
        
        // Preparation state
        this.isAudioReady = false;
        this.isAerialImagesReady = false;
        this.isBallImageReady = false;
        this.preparationOverlay = null;
        
        // Timers
        this.countdownTimer = null;
        this.countdownElement = null;
        this.preparationTimer = null;
        
        this.updateStatus('‰ΩçÁΩÆÊÉÖÂ†±„Å®„Éá„Éê„Ç§„Çπ„Çª„É≥„Çµ„Éº„ÅÆË®±ÂèØ„ÅåÂøÖË¶Å„Åß„Åô');

        // „ÄêËøΩÂä†„Äë„Éá„Éê„ÉÉ„Ç∞Ë°®Á§∫Ë¶ÅÁ¥†„Çí‰ΩúÊàê
        this.createDebugDisplay();
        console.log('‚úÖ BallThrowJourneyApp initialized');
    }

    // „ÄêÊñ∞Ë¶è„É°„ÇΩ„ÉÉ„Éâ„Äë„Éá„Éê„ÉÉ„Ç∞Ë°®Á§∫„Çí‰ΩúÊàê
    createDebugDisplay() {
    this.debugElement = document.createElement('div');
    this.debugElement.id = 'debugDisplay';
    this.debugElement.style.cssText = `
        position: fixed;
        top: 10px;
        left: 10px;
        background: rgba(0, 0, 0, 0.8);
        color: white;
        padding: 10px;
        border-radius: 5px;
        font-family: monospace;
        font-size: 12px;
        z-index: 10000;
        max-width: calc(100vw - 20px);
        white-space: pre-wrap;
        display: none;
    `;
    document.body.appendChild(this.debugElement);
}

// „ÄêÊñ∞Ë¶è„É°„ÇΩ„ÉÉ„Éâ„Äë„Éá„Éê„ÉÉ„Ç∞„É°„ÉÉ„Çª„Éº„Ç∏„ÇíÁîªÈù¢„Å´Ë°®Á§∫
showDebug(message) {
    if (this.debugElement) {
        const timestamp = new Date().toLocaleTimeString();
        this.debugElement.textContent = `[${timestamp}] ${message}`;
        this.debugElement.style.display = 'block';
        
        // 5ÁßíÂæå„Å´Ëá™Âãï„ÅßÈùûË°®Á§∫
        setTimeout(() => {
            if (this.debugElement) {
                this.debugElement.style.display = 'none';
            }
        }, 5000);
    }
}

    
    // 2ÁÇπÈñì„ÅÆË∑ùÈõ¢„ÇíË®àÁÆóÔºà„É°„Éº„Éà„É´Âçò‰ΩçÔºâ
    calculateDistance(lat1, lng1, lat2, lng2) {
        const R = 6371000; // Âú∞ÁêÉ„ÅÆÂçäÂæÑÔºà„É°„Éº„Éà„É´Ôºâ
        const dLat = (lat2 - lat1) * Math.PI / 180;
        const dLng = (lng2 - lng1) * Math.PI / 180;
        const a = Math.sin(dLat/2) * Math.sin(dLat/2) +
                 Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *
                 Math.sin(dLng/2) * Math.sin(dLng/2);
        const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
        return R * c;
    }
    
    async startApp() {
        const startBtn = document.getElementById('startBtn');
        if (!startBtn) return;
        
        console.log('üöÄ Starting app...');
        startBtn.disabled = true;
        startBtn.textContent = 'ÂàùÊúüÂåñ‰∏≠...';
        
        try {
            // Get location
            this.updateStatus('üìç ‰ΩçÁΩÆÊÉÖÂ†±„ÇíÂèñÂæó‰∏≠...');
            await this.getCurrentPosition();
            
            // Initialize map
            this.updateStatus('üó∫Ô∏è Âú∞Âõ≥„ÇíÊ∫ñÂÇô‰∏≠...');
            await this.initMap();
            
            // Request sensor permissions
            this.updateStatus('üì± „Çª„É≥„Çµ„ÉºË®±ÂèØ„ÇíÂèñÂæó‰∏≠...');
            await this.requestSensorPermission();
            
            this.setupComplete();
            
        } catch (error) {
            console.error('‚ùå Setup error:', error);
            this.showError('ÂàùÊúüÂåñ„Ç®„É©„Éº: ' + error.message);
            this.fallbackSetup();
        }
    }
    
    getCurrentPosition() {
        return new Promise((resolve, reject) => {
            if (!navigator.geolocation) {
                console.warn('‚ö†Ô∏è Geolocation not supported');
                resolve();
                return;
            }
            
            const options = {
                enableHighAccuracy: true,
                timeout: 15000,
                maximumAge: 60000
            };
            
            navigator.geolocation.getCurrentPosition(
                (position) => {
                    this.currentPosition = {
                        lat: position.coords.latitude,
                        lng: position.coords.longitude
                    };
                    this.startPosition = { ...this.currentPosition };
                    this.ballPosition = { ...this.currentPosition };
                    console.log('‚úÖ Position obtained:', this.currentPosition);
                    resolve();
                },
                (error) => {
                    console.warn('‚ö†Ô∏è Geolocation failed:', error.message);
                    resolve();
                },
                options
            );
        });
    }
    
    async initMap() {
        document.getElementById('loading').style.display = 'block';
        
        try {
            if (!window.google) {
                await this.loadGoogleMapsAPI();
            }
            
            this.map = new google.maps.Map(this.mapElement, {
                center: this.currentPosition,
                zoom: 20,
                mapTypeId: google.maps.MapTypeId.SATELLITE,
                disableDefaultUI: true,
                gestureHandling: 'none',
                heading: 0,
                tilt: 0,
                styles: [
                    {
                        featureType: 'all',
                        elementType: 'labels',
                        stylers: [{ visibility: 'off' }]
                    }
                ]
            });
            
            google.maps.event.addListenerOnce(this.map, 'idle', () => {
                console.log('‚úÖ Map is ready');
                this.isMapReady = true;
                
                setTimeout(() => {
                    this.isMapFullyLoaded = true;
                    console.log('‚úÖ Map fully loaded');
                }, 2000);
            });
            
        } catch (error) {
            console.error('‚ùå Map initialization failed:', error);
            throw error;
        }
        
        document.getElementById('loading').style.display = 'none';
    }
    
    loadGoogleMapsAPI() {
        return new Promise((resolve, reject) => {
            const script = document.createElement('script');
            script.src = `https://maps.googleapis.com/maps/api/js?key=AIzaSyDbZWtPobAYr04A8da3OUOjtNNdjfvkbXA&libraries=geometry`;
            script.async = true;
            script.defer = true;
            
            script.onload = () => {
                console.log('‚úÖ Google Maps API loaded');
                resolve();
            };
            
            script.onerror = () => {
                console.error('‚ùå Failed to load Google Maps API');
                reject(new Error('Google Maps API loading failed'));
            };
            
            document.head.appendChild(script);
        });
    }
    
    async requestSensorPermission() {
        try {
            // iOS 13+ device orientation permission
            if (typeof DeviceOrientationEvent !== 'undefined' && 
                typeof DeviceOrientationEvent.requestPermission === 'function') {
                
                const orientationPermission = await DeviceOrientationEvent.requestPermission();
                if (orientationPermission !== 'granted') {
                    throw new Error('„Éá„Éê„Ç§„ÇπÊñπÂêë„Çª„É≥„Çµ„Éº„ÅÆË®±ÂèØ„ÅåÂøÖË¶Å„Åß„Åô');
                }
            }
            
            // iOS 13+ device motion permission
            if (typeof DeviceMotionEvent !== 'undefined' && 
                typeof DeviceMotionEvent.requestPermission === 'function') {
                
                const motionPermission = await DeviceMotionEvent.requestPermission();
                if (motionPermission !== 'granted') {
                    throw new Error('„Éá„Éê„Ç§„Çπ„É¢„Éº„Ç∑„Éß„É≥„Çª„É≥„Çµ„Éº„ÅÆË®±ÂèØ„ÅåÂøÖË¶Å„Åß„Åô');
                }
            }
            
            this.startSensors();
            
        } catch (error) {
            console.warn('‚ö†Ô∏è Sensor permission failed:', error);
            this.startSensors();
        }
    }
    
    startSensors() {
        // Device orientation
        if (typeof DeviceOrientationEvent !== 'undefined') {
            window.addEventListener('deviceorientation', (event) => {
                this.handleOrientation(event);
            }, { passive: true });
            
            window.addEventListener('deviceorientationabsolute', (event) => {
                this.handleAbsoluteOrientation(event);
            }, { passive: true });
        }
        
        // Device motion for shake detection
        if (typeof DeviceMotionEvent !== 'undefined') {
            window.addEventListener('devicemotion', (event) => {
                this.handleMotion(event);
            }, { passive: true });
        } else {
            this.setupFallbackShakeDetection();
        }
        
        this.isPermissionGranted = true;
    }
    
    handleOrientation(event) {
        if (!this.isPermissionGranted) return;
        
        let newHeading = 0;
        
        // iOS
        if (event.webkitCompassHeading !== undefined) {
            newHeading = event.webkitCompassHeading;
        }
        // Android
        else if (event.alpha !== null) {
            newHeading = 360 - event.alpha;
            if (newHeading >= 360) newHeading -= 360;
            if (newHeading < 0) newHeading += 360;
        }
        
        this.heading = newHeading;
        
        const newTilt = event.beta || 0;
        const currentTime = Date.now();
        const deltaTime = Math.max((currentTime - this.lastTime) / 1000, 0.001);
        const deltaTilt = newTilt - this.lastTilt;
        this.tiltSpeed = Math.abs(deltaTilt) / deltaTime;
        
        this.tilt = newTilt;
        this.lastTilt = newTilt;
        this.lastTime = currentTime;
        
        this.updateDisplay();
    }
    
    handleAbsoluteOrientation(event) {
        if (event.absolute && event.alpha !== null) {
            this.absoluteHeading = event.alpha;
            this.heading = 360 - this.absoluteHeading;
            if (this.heading >= 360) this.heading -= 360;
            if (this.heading < 0) this.heading += 360;
        }
    }
    
    handleMotion(event) {
        if (!this.isDetectingShake) return;
        
        const acceleration = event.acceleration || event.accelerationIncludingGravity;
        if (!acceleration) return;
        
        // „Çà„ÇäÊ≠£Á¢∫„Å™Âä†ÈÄüÂ∫¶Ë®àÁÆó
        const totalAcceleration = Math.sqrt(
            Math.pow(acceleration.x || 0, 2) + 
            Math.pow(acceleration.y || 0, 2) + 
            Math.pow(acceleration.z || 0, 2)
        );
        
        const currentTime = Date.now();
        this.accelerationData.push({
            value: totalAcceleration,
            timestamp: currentTime
        });
        
        // Keep only recent data (last 1 second)
        this.accelerationData = this.accelerationData.filter(
            data => currentTime - data.timestamp <= 1000
        );
        
        if (totalAcceleration > this.maxAcceleration) {
            this.maxAcceleration = totalAcceleration;
        }
        
        // Update power meter
        const powerLevel = Math.min((totalAcceleration / 20) * 100, 100);
        document.getElementById('powerFill').style.height = powerLevel + '%';
        document.getElementById('speed').textContent = `${Math.round(totalAcceleration * 10)/10}`;
        
        // Detect throw
        if (totalAcceleration > this.shakeThreshold && this.maxAcceleration > this.shakeThreshold) {
            console.log('üéØ ÊäïÁêÉÊ§úÂá∫ÔºÅ');
            this.startThrowWithShake();
        }
    }
    
    setupFallbackShakeDetection() {
        console.log('üîß „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØÊåØ„ÇäÊ§úÂá∫„ÇíË®≠ÂÆö');
        let tapCount = 0;
        let lastTapTime = 0;
        
        const handleTap = (e) => {
            if (!this.isDetectingShake) return;
            
            console.log('üëÜ „Çø„ÉÉ„ÉóÊ§úÂá∫');
            const currentTime = Date.now();
            if (currentTime - lastTapTime < 500) {
                tapCount++;
                console.log(`„Çø„ÉÉ„ÉóÂõûÊï∞: ${tapCount}`);
                if (tapCount >= 3) {
                    this.maxAcceleration = 25;
                    console.log('üéØ „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØÊäïÁêÉÁô∫ÂãïÔºÅ');
                    this.startThrowWithShake();
                    tapCount = 0;
                }
            } else {
                tapCount = 1;
            }
            lastTapTime = currentTime;
        };
        
        document.addEventListener('touchstart', handleTap);
        document.addEventListener('click', handleTap);
        
        // ÁîªÈù¢„ÇíÈï∑Êäº„Åó„Åó„ÅüÂ†¥Âêà„ÇÇÊäïÁêÉÁô∫Âãï
        let longPressTimer = null;
        document.addEventListener('touchstart', (e) => {
            if (!this.isDetectingShake) return;
            longPressTimer = setTimeout(() => {
                this.maxAcceleration = 20;
                console.log('‚è±Ô∏è Èï∑Êäº„ÅóÊäïÁêÉÁô∫ÂãïÔºÅ');
                this.startThrowWithShake();
            }, 1500);
        });
        
        document.addEventListener('touchend', () => {
            if (longPressTimer) {
                clearTimeout(longPressTimer);
                longPressTimer = null;
            }
        });
    }
    
    updateDisplay() {
        document.getElementById('heading').textContent = Math.round(this.heading) + '¬∞';
        document.getElementById('compass').textContent = this.getCompassDirection(this.heading);
        document.getElementById('tilt').textContent = Math.round(this.tilt) + '¬∞';
        
        // Update compass needle
        this.compassNeedle.style.transform = `rotate(${this.heading}deg)`;
        
        // „Çπ„Çø„Éº„ÉàÂú∞ÁÇπ„Åã„Çâ„ÅÆË∑ùÈõ¢„ÇíË®àÁÆó„Åó„Å¶Ë°®Á§∫
        if (!this.isBallMoving) {
            this.totalDistance = this.calculateDistance(
                this.startPosition.lat, this.startPosition.lng,
                this.ballPosition.lat, this.ballPosition.lng
            );
            document.getElementById('distance').textContent = Math.round(this.totalDistance) + 'm';
        }
        
        // Map rotation management
        const DEAD_ZONE_START = 350;
        const DEAD_ZONE_END = 10;
        
        const isHeadingInDeadZone = (this.heading >= DEAD_ZONE_START && this.heading < 360) || 
                                    (this.heading >= 0 && this.heading < DEAD_ZONE_END);

        if (!this.isActive && !this.isCountdownActive && !this.isBallMoving && this.isMapReady && !isHeadingInDeadZone) {
            this.mapElement.style.transform = `rotate(${-this.heading}deg)`;
        }
        
        this.updateCoordinatesDisplay();
    }
    
    getCompassDirection(heading) {
        const directions = ['Âåó', 'ÂåóÊù±', 'Êù±', 'ÂçóÊù±', 'Âçó', 'ÂçóË•ø', 'Ë•ø', 'ÂåóË•ø'];
        const index = Math.round(heading / 45) % 8;
        return directions[index];
    }
    
    updateCoordinatesDisplay() {
        const lat = this.ballPosition.lat.toFixed(6);
        const lng = this.ballPosition.lng.toFixed(6);
        document.getElementById('coordinates').textContent = `${lat}, ${lng}`;
    }
    
    setupComplete() {
        this.updateStatus('üéØ ÊäïÁêÉÊ∫ñÂÇôÂÆå‰∫ÜÔºÅ„Çπ„Çø„Éº„Éà„Éú„Çø„É≥„ÇíÊäº„Åó„Å¶„Åè„Å†„Åï„ÅÑ');
        this.updateCoordinatesDisplay();
        
        // Initialize canvas
        this.initCanvas();
        
        if (this.map) {
            try {
                this.map.setCenter(this.currentPosition);
                setTimeout(() => {
                    if (window.google && google.maps && google.maps.event) {
                        google.maps.event.trigger(this.map, 'resize');
                        this.map.setCenter(this.currentPosition);
                    }
                }, 100);
            } catch (e) {
                console.warn('‚ö†Ô∏è Map setup failed:', e);
            }
        }
        
        const startBtn = document.getElementById('startBtn');
        startBtn.textContent = 'üöÄ „Çπ„Çø„Éº„Éà';
        startBtn.disabled = false;
        startBtn.classList.add('countdown-ready');
        startBtn.onclick = () => this.startCountdown();
    }
    
    // CanvasÂàùÊúüÂåñÔºà„Ç®„É©„Éº„Éè„É≥„Éâ„É™„É≥„Ç∞Âº∑ÂåñÔºâ
    initCanvas() {
        if (!this.gameCanvas) {
            console.error('‚ùå Game canvas element not found');
            return false;
        }
        
        const container = this.gameCanvas.parentElement;
        if (!container) {
            console.error('‚ùå Canvas container not found');
            return false;
        }
        
        this.canvasWidth = container.clientWidth;
        this.canvasHeight = container.clientHeight;
        
        if (this.canvasWidth <= 0 || this.canvasHeight <= 0) {
            console.error('‚ùå Invalid canvas dimensions:', this.canvasWidth, 'x', this.canvasHeight);
            return false;
        }
        
        this.gameCanvas.width = this.canvasWidth;
        this.gameCanvas.height = this.canvasHeight;
        
        try {
            this.ctx = this.gameCanvas.getContext('2d');
            if (!this.ctx) {
                throw new Error('Canvas context is null');
            }
        } catch (error) {
            console.error('‚ùå Failed to get canvas context:', error);
            return false;
        }
        
        this.ballCanvasX = this.canvasWidth / 2;
        this.ballCanvasY = this.canvasHeight / 2;
        
        this.loadBallImage();
        
        console.log('‚úÖ Canvas initialized successfully:', this.canvasWidth, 'x', this.canvasHeight);
        return true;
    }

    // „Éú„Éº„É´ÁîªÂÉèË™≠„ÅøËæº„ÅøÔºàÊîπÂñÑÁâàÔºâ
    loadBallImage() {
        console.log('üèÄ „Éú„Éº„É´ÁîªÂÉèË™≠„ÅøËæº„ÅøÈñãÂßã');
        this.ballImage = new Image();

        this.ballImage.onload = () => {
            console.log('‚úÖ Ball image loaded successfully');
            this.isBallImageReady = true;
            this.updatePreparationStatus();
        };
        this.ballImage.onerror = () => {
            console.warn('‚ö†Ô∏è Ball image failed to load, creating fallback');
            this.createFallbackBallImage();
            this.ballImage.src = 'ball.png';// „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ
        
        // ball.png„ÇÇÂ§±Êïó„Åó„ÅüÂ†¥Âêà„ÅÆ„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ
            this.ballImage.onerror = () => {
                console.warn('‚ö†Ô∏è ball.png also failed, creating fallback');
                this.createFallbackBallImage();
            };
        };

        // ‰øÆÊ≠£: ball.gif „ÇíÊúÄÂàù„Å´Ë©¶Ë°åÔºà„Åì„ÅÆË°å„ÇíÂ§âÊõ¥Ôºâ
        this.ballImage.src = 'ball.gif';  // ÂÖÉ: 'ball.png'
    }
    
    // „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ„Éú„Éº„É´ÁîªÂÉèÁîüÊàê
    createFallbackBallImage() {
        const canvas = document.createElement('canvas');
        canvas.width = 120;
        canvas.height = 120;
        const ctx = canvas.getContext('2d');
        
        const centerX = 60;
        const centerY = 60;
        const radius = 55;
        
        // „Éê„Çπ„Ç±„ÉÉ„Éà„Éú„Éº„É´È¢®„ÅÆ„Éú„Éº„É´
        const gradient = ctx.createRadialGradient(
            centerX - 20, centerY - 20, 0,
            centerX, centerY, radius
        );
        gradient.addColorStop(0, '#ff8a65');
        gradient.addColorStop(0.7, '#ff5722');
        gradient.addColorStop(1, '#d84315');
        
        ctx.fillStyle = gradient;
        ctx.beginPath();
        ctx.arc(centerX, centerY, radius, 0, 2 * Math.PI);
        ctx.fill();
        
        // „Éê„Çπ„Ç±„ÉÉ„Éà„Éú„Éº„É´„ÅÆ„É©„Ç§„É≥
        ctx.strokeStyle = '#8d4004';
        ctx.lineWidth = 3;
        
        ctx.beginPath();
        ctx.moveTo(centerX, centerY - radius);
        ctx.lineTo(centerX, centerY + radius);
        ctx.stroke();
        
        ctx.beginPath();
        ctx.arc(centerX, centerY, radius * 0.7, -Math.PI, 0);
        ctx.stroke();
        
        ctx.beginPath();
        ctx.arc(centerX, centerY, radius * 0.7, 0, Math.PI);
        ctx.stroke();
        
        // „Éè„Ç§„É©„Ç§„Éà
        ctx.fillStyle = '#ffccbc';
        ctx.beginPath();
        ctx.arc(centerX - 15, centerY - 15, 8, 0, 2 * Math.PI);
        ctx.fill();
        
        this.ballImage = new Image();
        this.ballImage.onload = () => {
            console.log('‚úÖ Fallback ball image created');
            this.isBallImageReady = true;
            this.updatePreparationStatus();
        };
        this.ballImage.src = canvas.toDataURL();
    }
    
    fallbackSetup() {
        setTimeout(() => {
            this.isMapReady = true;
            this.isMapFullyLoaded = true;
            this.isPermissionGranted = true;
            this.setupComplete();
        }, 2000);
    }
    
    async startCountdown() {
        if (this.isCountdownActive || this.isActive) return;
        
        this.playSound('start');
        
        this.isCountdownActive = true;
        const startBtn = document.getElementById('startBtn');
        startBtn.disabled = true;
        startBtn.classList.remove('countdown-ready');
        
        let count = 3;
        this.showCountdown(count);
        
        this.countdownTimer = setInterval(() => {
            count--;
            if (count > 0) {
                this.showCountdown(count);
            } else {
                this.showCountdown('Êäï„Åí„Å¶ÔºÅ');
                setTimeout(() => {
                    this.hideCountdown();
                    this.enableThrowDetection();
                }, 1000);
                clearInterval(this.countdownTimer);
            }
        }, 1000);
    }
    
    showCountdown(text) {
        this.hideCountdown();
        
        this.countdownElement = document.createElement('div');
        this.countdownElement.className = 'countdown';
        this.countdownElement.textContent = text;
        document.body.appendChild(this.countdownElement);
    }
    
    hideCountdown() {
        if (this.countdownElement && this.countdownElement.parentNode) {
            this.countdownElement.parentNode.removeChild(this.countdownElement);
            this.countdownElement = null;
        }
    }
    
    enableThrowDetection() {
        this.isCountdownActive = false;
        this.isDetectingShake = true;
        this.accelerationData = [];
        this.maxAcceleration = 0;
        
        document.getElementById('powerMeter').style.display = 'block';
        
        this.updateStatus('üì± „Çπ„Éû„Éõ„ÇíÊåØ„Å£„Å¶ÊäïÁêÉ„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºÅÔºà3Âõû„Çø„ÉÉ„Éó„Åæ„Åü„ÅØÈï∑Êäº„Åó„Åß„ÇÇÂèØËÉΩÔºâ');
        
        // 15Áßí„Åß„Çø„Ç§„É†„Ç¢„Ç¶„Éà
        setTimeout(() => {
            if (!this.isActive && this.isDetectingShake) {
                this.isDetectingShake = false;
                document.getElementById('powerMeter').style.display = 'none';
                this.updateStatus('‚è∞ „Çø„Ç§„É†„Ç¢„Ç¶„Éà„Åó„Åæ„Åó„Åü„ÄÇÂÜçÂ∫¶„ÅäË©¶„Åó„Åè„Å†„Åï„ÅÑ„ÄÇ');
                this.reset();
            }
        }, 15000);
    }
    
    startThrowWithShake() {
        if (this.isActive || !this.isDetectingShake) return;
        
        console.log('üéØ ÊäïÁêÉÊ∫ñÂÇôÂá¶ÁêÜÈñãÂßã');
        // ÈáçË¶ÅÔºö„Åì„Åì„Åß„ÅØ„Åæ„Å†„Éú„Éº„É´ÁßªÂãï„ÇíÈñãÂßã„Åó„Å™„ÅÑÔºàÁä∂ÊÖã„Éï„É©„Ç∞„ÅØË®≠ÂÆö„Åó„Å™„ÅÑÔºâ
        // „É™„ÇΩ„Éº„ÇπÊ∫ñÂÇôÁîªÈù¢„ÇíË°®Á§∫Ôºà„Éú„Éº„É´ÁßªÂãï„ÅØ„Åæ„Å†ÈñãÂßã„Åó„Å™„ÅÑÔºâ
        this.isDetectingShake = false;
        document.getElementById('powerMeter').style.display = 'none';
        
        const shakeIntensity = Math.min(this.maxAcceleration / 30, 1);
        this.throwPower = Math.max(100, shakeIntensity * 1000);
        this.throwAngle = this.heading;
        
        console.log(`ÊäïÁêÉÊ§úÂá∫! „Éë„ÉØ„Éº: ${this.throwPower}m, ÊñπÂêë: ${this.throwAngle}¬∞`);
        
        this.ballElement.classList.add('throwing');
        this.ballTrailPoints = [];
        this.clearTrails();
        this.ballPosition = { ...this.startPosition };
        
        this.showResourcePreparation();
    }
    
    showResourcePreparation() {
        this.preparationOverlay = document.createElement('div');
        this.preparationOverlay.className = 'preparation-overlay';
        this.preparationOverlay.innerHTML = `
            <div>
                <div style="font-size: 32px; margin-bottom: 20px;">üèÄ</div>
                <div style="font-size: 24px; margin-bottom: 20px;">ÊäïÁêÉÊ∫ñÂÇô‰∏≠...</div>
                
                <div class="preparation-status">
                    <div class="status-item status-loading" id="statusAudio">
                        üîä ÂäπÊûúÈü≥: Ê∫ñÂÇô‰∏≠...
                    </div>
                    <div class="status-item status-loading" id="statusImages">
                        üõ∞Ô∏è Ëà™Á©∫ÂÜôÁúü: Ê∫ñÂÇô‰∏≠...
                    </div>
                    <div class="status-item status-loading" id="statusBall">
                        üèÄ „Éú„Éº„É´ÁîªÂÉè: Ê∫ñÂÇô‰∏≠...
                    </div>
                </div>
                
                <button class="kick-button" id="kickButton" disabled>
                    Ê∫ñÂÇô‰∏≠...
                </button>
            </div>
        `;
        document.body.appendChild(this.preparationOverlay);
        
        this.prepareResources();
    }
    
    async prepareResources() {
        console.log('üöÄ „É™„ÇΩ„Éº„ÇπÊ∫ñÂÇôÈñãÂßã');

        // ‰øÆÊ≠£: Áä∂ÊÖã„Çí„É™„Çª„ÉÉ„ÉàÔºà„Åì„ÅÆ3Ë°å„ÇíËøΩÂä†Ôºâ
        this.isAudioReady = false;
        this.isAerialImagesReady = false;
        this.isBallImageReady = false;
    
        
        // ‰∏¶Ë°å„Åó„Å¶„É™„ÇΩ„Éº„Çπ„ÇíÊ∫ñÂÇô
        this.prepareAudio();
        this.prepareAerialImages();
        this.loadBallImage();
    }
    
    // Èü≥Â£∞Ê∫ñÂÇôÔºàÊîπÂñÑÁâàÔºâ
    prepareAudio() {
        console.log('üîä ÂäπÊûúÈü≥Ê∫ñÂÇôÈñãÂßã');
        
        const kickAudio = this.sounds.kick;
        // „Åæ„ÅöÁèæÂú®„ÅÆÁä∂ÊÖã„Çí„ÉÅ„Çß„ÉÉ„ÇØ
        if (kickAudio.readyState >= 2) {
            console.log('‚úÖ ÂäπÊûúÈü≥„ÅØÊó¢„Å´Ê∫ñÂÇôÊ∏à„Åø');
            this.isAudioReady = true;
            this.updatePreparationStatus();
            return;
        }

        const onCanPlay = () => {
            console.log('‚úÖ ÂäπÊûúÈü≥Ê∫ñÂÇôÂÆå‰∫ÜÔºà„Ç§„Éô„É≥„ÉàÔºâ');
            this.isAudioReady = true;
            this.updatePreparationStatus();
            cleanup();
        };
            const onError = (e) => {
                console.warn('‚ö†Ô∏è ÂäπÊûúÈü≥Ë™≠„ÅøËæº„ÅøÂ§±Êïó„ÄÅÊñ∞„Åó„ÅÑ„Ç§„É≥„Çπ„Çø„É≥„Çπ„ÅßÂÜçË©¶Ë°å', e);
                // Êñ∞„Åó„ÅÑAudio„Ç§„É≥„Çπ„Çø„É≥„Çπ„Çí‰ΩúÊàê
                const newAudio = new Audio('kick.mp3');
                newAudio.volume = 0.8;
                newAudio.preload = 'auto';
                this.sounds.kick = newAudio;
        
                newAudio.onload = () => {
                    console.log('‚úÖ Êñ∞„Åó„ÅÑÂäπÊûúÈü≥„Ç§„É≥„Çπ„Çø„É≥„ÇπÊ∫ñÂÇôÂÆå‰∫Ü');
                    this.isAudioReady = true;
                    this.updatePreparationStatus();
                };
        
                newAudio.onerror = () => {
                    console.log('‚ö†Ô∏è ÂäπÊûúÈü≥Ê∫ñÂÇôÂ§±Êïó„ÄÅ„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ„ÅßÁ∂öË°å');
                    this.isAudioReady = true;
                    this.updatePreparationStatus();
                };
        
                cleanup();
                };

            const cleanup = () => {
            kickAudio.removeEventListener('canplaythrough', onCanPlay);
            kickAudio.removeEventListener('error', onError);
            };
    
            kickAudio.addEventListener('canplaythrough', onCanPlay, { once: true });
            kickAudio.addEventListener('error', onError, { once: true });
    
            try {
                kickAudio.load();
            } catch (e) {
            console.warn('Audio load failed:', e);
            onError(e);
        }


        // „Çø„Ç§„É†„Ç¢„Ç¶„ÉàË®≠ÂÆö„ÇíÁü≠Á∏Æ
        setTimeout(() => {
            if (!this.isAudioReady) {
                console.warn('‚ö†Ô∏è ÂäπÊûúÈü≥Ê∫ñÂÇô„Çø„Ç§„É†„Ç¢„Ç¶„Éà„ÄÅÂº∑Âà∂ÁöÑ„Å´Ê∫ñÂÇôÂÆå‰∫Ü„Å®„Åô„Çã');
                this.isAudioReady = true;
                this.updatePreparationStatus();
                cleanup();
            }
        }, 2000);
    }
        
    
    updatePreparationStatus() {
        if (!this.preparationOverlay) return;
        
        const statusAudio = this.preparationOverlay.querySelector('#statusAudio');
        const statusImages = this.preparationOverlay.querySelector('#statusImages');
        const statusBall = this.preparationOverlay.querySelector('#statusBall');
        const kickButton = this.preparationOverlay.querySelector('#kickButton');
        
        if (this.isAudioReady) {
            statusAudio.className = 'status-item status-ready';
            statusAudio.textContent = 'üîä ÂäπÊûúÈü≥: Ê∫ñÂÇôÂÆå‰∫Ü ‚úÖ';
        }
        
        if (this.isAerialImagesReady) {
            statusImages.className = 'status-item status-ready';
            statusImages.textContent = `üõ∞Ô∏è Ëà™Á©∫ÂÜôÁúü: Ê∫ñÂÇôÂÆå‰∫Ü (${this.aerialImages.length}Êûö) ‚úÖ`;
        }
        
        if (this.isBallImageReady) {
            statusBall.className = 'status-item status-ready';
            statusBall.textContent = 'üèÄ „Éú„Éº„É´ÁîªÂÉè: Ê∫ñÂÇôÂÆå‰∫Ü ‚úÖ';
        }
        
        if (this.isAudioReady && this.isAerialImagesReady && this.isBallImageReady) {
            kickButton.disabled = false;
            kickButton.textContent = 'üöÄ KICK!';
            kickButton.onclick = () => {
                this.hideResourcePreparation();
                 // „Åì„Åì„Åß„Éú„Éº„É´ÁßªÂãï„ÇíÈñãÂßã
                this.startBallMovement();
            };
            
            console.log('üéØ ÂÖ®„É™„ÇΩ„Éº„ÇπÊ∫ñÂÇôÂÆå‰∫ÜÔºÅKick„Éú„Çø„É≥ÊúâÂäπÂåñ');
        }
    }
    
    hideResourcePreparation() {
        if (this.preparationOverlay && this.preparationOverlay.parentNode) {
            this.preparationOverlay.parentNode.removeChild(this.preparationOverlay);
            this.preparationOverlay = null;
        }
    }
    

    // Ëà™Á©∫ÂÜôÁúüÊ∫ñÂÇôÔºàÊîπÂñÑÁâàÔºâ
async prepareAerialImages() {
    console.log('üõ∞Ô∏è Ëà™Á©∫ÂÜôÁúüÊ∫ñÂÇôÈñãÂßã');
    
    const bearing = this.throwAngle * Math.PI / 180;
    const earthRadius = 6371000;
    const maxDistance = this.throwPower; 
    const imageCount = 12;
    
    this.aerialImages = [];
    
    // „Ç∑„É≥„Éó„É´„Å™ÂêåÊúüÂá¶ÁêÜ„Å´Â§âÊõ¥
    for (let i = 0; i < imageCount; i++) {
        const distance = (maxDistance / imageCount) * i;
        
        // Â∫ßÊ®ôË®àÁÆó
        const lat1 = this.startPosition.lat * Math.PI / 180;
        const lng1 = this.startPosition.lng * Math.PI / 180;
        
        const lat2 = Math.asin(
            Math.sin(lat1) * Math.cos(distance / earthRadius) +
            Math.cos(lat1) * Math.sin(distance / earthRadius) * Math.cos(bearing)
        );
        
        const lng2 = lng1 + Math.atan2(
            Math.sin(bearing) * Math.sin(distance / earthRadius) * Math.cos(lat1),
            Math.cos(distance / earthRadius) - Math.sin(lat1) * Math.sin(lat2)
        );
        
        const position = {
            lat: lat2 * 180 / Math.PI,
            lng: lng2 * 180 / Math.PI
        };
        
        // ÁîªÂÉè„ÇíÁõ¥Êé•ÁîüÊàê„Åó„Å¶ÈÖçÂàó„Å´ËøΩÂä†
        const aerialImage = this.createDetailedAerialImage(i, position, distance);
        
        this.aerialImages.push({
            image: aerialImage,
            position: position,
            distance: distance,
            index: i
        });
        
        console.log(`üì∏ Ëà™Á©∫ÂÜôÁúü ${i + 1}/${imageCount} ÁîüÊàêÂÆå‰∫Ü`);
    }
    
    console.log('üéØ Ëà™Á©∫ÂÜôÁúüÊ∫ñÂÇôÂÆå‰∫ÜÔºÅ');
    this.isAerialImagesReady = true;
    this.updatePreparationStatus();
}
    

// „Çà„ÇäË©≥Á¥∞„Å™Ëà™Á©∫ÂÜôÁúüÈ¢®ÁîªÂÉè„ÇíÁîüÊàêÔºàÂÆåÂÖ®‰øÆÊ≠£ÁâàÔºâ
    createDetailedAerialImage(index, position, distance) {
        const canvas = document.createElement('canvas');
        canvas.width = this.canvasWidth * 3; // „Çà„ÇäÂ§ß„Åç„Å™„Çµ„Ç§„Ç∫„ÅßÁîüÊàê
        canvas.height = this.canvasHeight * 3;
        const ctx = canvas.getContext('2d');
    
    // Ë∑ùÈõ¢„Å´Âøú„Åò„ÅüÂú∞ÂΩ¢„Éë„Çø„Éº„É≥„ÇíÊ±∫ÂÆö
        const terrainTypes = [
            { colors: ['#4CAF50', '#2E7D32'], name: 'Ê£ÆÊûóÂú∞Â∏Ø', pattern: 'forest' },
            { colors: ['#81C784', '#388E3C'], name: 'ËçâÂéüÂú∞Â∏Ø', pattern: 'grass' },
            { colors: ['#A5D6A7', '#4CAF50'], name: 'ÂÖ¨Âúí„Ç®„É™„Ç¢', pattern: 'park' },
            { colors: ['#FFEB3B', '#FBC02D'], name: 'ÈñãÁô∫Âú∞Âå∫', pattern: 'urban' },
            { colors: ['#607D8B', '#455A64'], name: 'Â∏ÇË°óÂú∞', pattern: 'city' },
            { colors: ['#795548', '#5D4037'], name: '‰∏òÈôµÂú∞Â∏Ø', pattern: 'hills' },
            { colors: ['#2196F3', '#1565C0'], name: 'Ê≤≥Â∑ù„Ç®„É™„Ç¢', pattern: 'water' },
            { colors: ['#FF9800', '#F57C00'], name: 'Ëæ≤Ê•≠Âú∞Âå∫', pattern: 'farm' }
        ];
    
        const terrain = terrainTypes[index % terrainTypes.length];  // ‚Üê terrainÂ§âÊï∞
    
    // ËÉåÊôØ„Ç∞„É©„Éá„Éº„Ç∑„Éß„É≥Ôºà‰øÆÊ≠£Ôºâ
        const gradient = ctx.createRadialGradient(
            canvas.width / 2, canvas.height / 2, 0,
            canvas.width / 2, canvas.height / 2, canvas.width / 2
        );
        gradient.addColorStop(0, terrain.colors[0]);  // ‚Üê ‰øÆÊ≠£: terrain.colors
        gradient.addColorStop(1, terrain.colors[1]);  // ‚Üê ‰øÆÊ≠£: terrain.colors
    
        ctx.fillStyle = gradient;
        ctx.fillRect(0, 0, canvas.width, canvas.height);
    
    // „Éë„Çø„Éº„É≥ËøΩÂä†
    ctx.fillStyle = 'rgba(255, 255, 255, 0.1)';
    for (let i = 0; i < 100; i++) {
        const x = Math.random() * canvas.width;
        const y = Math.random() * canvas.height;
        const size = Math.random() * 8 + 2;
        ctx.fillRect(x, y, size, size);
    }
    
    // „Ç∞„É™„ÉÉ„Éâ„Éë„Çø„Éº„É≥
    ctx.strokeStyle = 'rgba(255, 255, 255, 0.2)';
    ctx.lineWidth = 2;
    const gridSize = 100;
    for (let x = 0; x < canvas.width; x += gridSize) {
        ctx.beginPath();
        ctx.moveTo(x, 0);
        ctx.lineTo(x, canvas.height);
        ctx.stroke();
    }
    for (let y = 0; y < canvas.height; y += gridSize) {
        ctx.beginPath();
        ctx.moveTo(0, y);
        ctx.lineTo(canvas.width, y);
        ctx.stroke();
    }
    
    // ÊÉÖÂ†±„ÉÜ„Ç≠„Çπ„Éà„Ç™„Éº„Éê„Éº„É¨„Ç§
    ctx.fillStyle = 'rgba(0, 0, 0, 0.7)';
    ctx.fillRect(10, 10, canvas.width - 20, 120);
    
    ctx.fillStyle = '#ffffff';
    ctx.font = 'bold 28px Arial';
    ctx.textAlign = 'left';
    ctx.fillText(`${terrain.name}`, 30, 50);  // ‚Üê ‰øÆÊ≠£: terrain.name
    
    ctx.font = '22px Arial';
    ctx.fillText(`Ë∑ùÈõ¢: ${Math.round(distance)}m`, 30, 80);  // ‚Üê ‰øÆÊ≠£: distance
    ctx.fillText(`Â∫ßÊ®ô: ${position.lat.toFixed(5)}, ${position.lng.toFixed(5)}`, 30, 110);
    
    const img = new Image();
    img.src = canvas.toDataURL();
    return img;
}
    
    // Âü∫Êú¨„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØÁîªÂÉè
    createBasicFallbackImage() {
        const canvas = document.createElement('canvas');
        canvas.width = 640;
        canvas.height = 640;
        const ctx = canvas.getContext('2d');
        
        const gradient = ctx.createLinearGradient(0, 0, 640, 640);
        gradient.addColorStop(0, '#4CAF50');
        gradient.addColorStop(1, '#2E7D32');
        ctx.fillStyle = gradient;
        ctx.fillRect(0, 0, 640, 640);
        
        ctx.fillStyle = 'rgba(255, 255, 255, 0.2)';
        for (let i = 0; i < 20; i++) {
            const x = Math.random() * 640;
            const y = Math.random() * 640;
            ctx.fillRect(x, y, 4, 4);
        }
        
        const img = new Image();
        img.src = canvas.toDataURL();
        return img;
    }
    
    // „Éú„Éº„É´ÁßªÂãïÈñãÂßãÔºàÊîπÂñÑÁâàÔºâ
    async startBallMovement() {
        // „Åì„Åì„ÅßÂàù„ÇÅ„Å¶Áä∂ÊÖã„Éï„É©„Ç∞„ÇíË®≠ÂÆö
        this.isActive = true;
        this.isBallMoving = true;
        
        console.log('üöÄ „Éú„Éº„É´ÁßªÂãïÈñãÂßã - „Ç≠„É£„É≥„Éê„Çπ„É¢„Éº„Éâ');
        
        if (!this.ctx) {
            console.warn('‚ö†Ô∏è Canvas context not ready, reinitializing...');
            if (!this.initCanvas()) {
                console.error('‚ùå Canvas initialization failed, aborting animation');
                this.landBall();
                return;
            }
        }
        
        this.mapElement.style.display = 'none';
        this.gameCanvas.style.display = 'block';
        this.ballElement.style.display = 'none';
        
        this.animationFrame = 0;
        this.backgroundOffsetY = 0;
        
        this.updateStatus(`üèÄ „Éú„Éº„É´ÊäïÁêÉ‰∏≠... ÊñπÂêë: ${this.getCompassDirection(this.throwAngle)} (${Math.round(this.throwAngle)}¬∞)`);
        
        // Èü≥Â£∞ÂÜçÁîü
        console.log('üîä Èü≥Â£∞ÂÜçÁîüÈñãÂßã');
        this.playKickSound();
        
        this.animateCanvasThrow();
    }
    
    // „Ç≠„ÉÉ„ÇØÈü≥ÂÜçÁîüÔºàÂ∞ÇÁî®„É°„ÇΩ„ÉÉ„ÉâÔºâ
    playKickSound() {
        const kickAudio = this.sounds.kick;
        console.log('üîä „Ç≠„ÉÉ„ÇØÈü≥ÂÜçÁîüÈñãÂßã');
        
        try {

            // Èü≥Â£∞„Éï„Ç°„Ç§„É´„ÅÆÁä∂ÊÖã„Çí„ÉÅ„Çß„ÉÉ„ÇØ
            console.log('üéµ Èü≥Â£∞Áä∂ÊÖã:', {
                readyState: kickAudio.readyState,
                networkState: kickAudio.networkState,
                src: kickAudio.src,
                duration: kickAudio.duration
            });


            //ÂÜçÁîü‰ΩçÁΩÆ„Çí„É™„Çª„ÉÉ„Éà
            kickAudio.currentTime = 0;
            kickAudio.volume = 1.0;
            
            const playPromise = kickAudio.play();
            
            if (playPromise !== undefined) {
                playPromise
                    .then(() => {
                        console.log('‚úÖ „Ç≠„ÉÉ„ÇØÈü≥ÂÜçÁîüÊàêÂäüÔºÅ');
                    })
                    .catch(error => {
                        console.error('‚ùå „Ç≠„ÉÉ„ÇØÈü≥ÂÜçÁîüÂ§±Êïó:', error);
                        this.fallbackPlayKickSound();
                    });
            } else {
                console.log('‚úÖ „Ç≠„ÉÉ„ÇØÈü≥ÂÜçÁîüÈñãÂßãÔºàPromiseÊú™„Çµ„Éù„Éº„ÉàÔºâ');
            }

            // ÂÜçÁîüÁ¢∫Ë™çÁî®„ÅÆ„Çø„Ç§„Éû„Éº
            setTimeout(() => {
                if (kickAudio.currentTime > 0) {
                    console.log('‚úÖ „Ç≠„ÉÉ„ÇØÈü≥Ê≠£Â∏∏ÂÜçÁîü‰∏≠ - ÊôÇÈñì:', kickAudio.currentTime);
                } else {
                    console.warn('‚ö†Ô∏è „Ç≠„ÉÉ„ÇØÈü≥ÂÜçÁîü„Åï„Çå„Å¶„ÅÑ„Å™„ÅÑÂèØËÉΩÊÄß„Åå„ÅÇ„Çä„Åæ„Åô');
                    this.fallbackPlayKickSound();
                }
            }, 100);
            
        } catch (error) {
            console.error('‚ùå „Ç≠„ÉÉ„ÇØÈü≥ÂÜçÁîü„Ç®„É©„Éº:', error);
            this.fallbackPlayKickSound();
        }
    }
    
    // „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØÈü≥Â£∞ÂÜçÁîü
    fallbackPlayKickSound() {
        console.log('üîÑ „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØÈü≥Â£∞ÂÜçÁîü„ÇíË©¶Ë°å');
        
        try {
            const fallbackAudio = new Audio('kick.mp3');
            fallbackAudio.volume = 1.0;
            fallbackAudio.play()
                .then(() => console.log('‚úÖ „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØÈü≥Â£∞ÂÜçÁîüÊàêÂäü'))
                .catch(e => console.log('‚ö†Ô∏è „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØÈü≥Â£∞„ÇÇÂ§±Êïó:', e));
        } catch (e) {
            console.log('‚ö†Ô∏è „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØÈü≥Â£∞‰ΩúÊàêÂ§±Êïó:', e);
        }
    }
    
    // CanvasÊèèÁîª„Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥ÔºàÊîπÂñÑÁâàÔºâ
    animateCanvasThrow() {
        // Áä∂ÊÖã„ÉÅ„Çß„ÉÉ„ÇØ„ÇíËøΩÂä†
        if (!this.isActive || !this.isBallMoving || !this.ctx) {
            console.log('‚ùå „Ç≠„É£„É≥„Éê„Çπ„Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥ÂÅúÊ≠¢ - Áä∂ÊÖãÁï∞Â∏∏');
            return;
        }
        
        this.animationFrame++;
        const progress = this.animationFrame * 0.002;
        
        if (progress >= 1 || this.backgroundOffsetY >= this.canvasHeight * 4) {
            console.log('‚úÖ „Ç≠„É£„É≥„Éê„Çπ„Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥ÂÆå‰∫Ü„ÄÅÁùÄÂú∞Âá¶ÁêÜÈñãÂßã');
            this.landBall();
            return;
        }
        
        const currentDistance = this.throwPower * progress;
        
        // „Éú„Éº„É´‰ΩçÁΩÆÊõ¥Êñ∞
        const bearing = this.throwAngle * Math.PI / 180;
        const earthRadius = 6371000;
        
        const lat1 = this.startPosition.lat * Math.PI / 180;
        const lng1 = this.startPosition.lng * Math.PI / 180;
        
        const lat2 = Math.asin(
            Math.sin(lat1) * Math.cos(currentDistance / earthRadius) +
            Math.cos(lat1) * Math.sin(currentDistance / earthRadius) * Math.cos(bearing)
        );
        
        const lng2 = lng1 + Math.atan2(
            Math.sin(bearing) * Math.sin(currentDistance / earthRadius) * Math.cos(lat1),
            Math.cos(currentDistance / earthRadius) - Math.sin(lat1) * Math.sin(lat2)
        );
        
        this.ballPosition = {
            lat: lat2 * 180 / Math.PI,
            lng: lng2 * 180 / Math.PI
        };
        
        // CanvasÊèèÁîª
        try {
            this.ctx.clearRect(0, 0, this.canvasWidth, this.canvasHeight);
        } catch (error) {
            console.error('‚ùå Canvas clear failed:', error);
            this.landBall();
            return;
        }
        
        this.drawBackground(currentDistance, progress);
        this.drawCanvasBall(progress);
        
        // Ë∑ùÈõ¢Ë°®Á§∫Êõ¥Êñ∞
        const realDistance = this.calculateDistance(
            this.startPosition.lat, this.startPosition.lng,
            this.ballPosition.lat, this.ballPosition.lng
        );
        document.getElementById('distance').textContent = Math.round(realDistance) + 'm';
        this.updateCoordinatesDisplay();
        
        requestAnimationFrame(() => this.animateCanvasThrow());
    }
    

 
    // ËÉåÊôØÊèèÁîªÔºà„Éá„Éê„ÉÉ„Ç∞Ë°®Á§∫ÁâàÔºâ
    drawBackground(currentDistance, progress) {
    if (!this.ctx) return;
    
    try {
        const imageIndex = Math.min(
            Math.floor((currentDistance / this.throwPower) * this.aerialImages.length),
            this.aerialImages.length - 1
        );
        
        // „Äê„Éá„Éê„ÉÉ„Ç∞Ë°®Á§∫„ÄëÂü∫Êú¨ÊÉÖÂ†±
        this.showDebug(`ÊèèÁîªË©¶Ë°å: idx=${imageIndex}, ÈÖçÂàóÈï∑=${this.aerialImages.length}, Ë∑ùÈõ¢=${Math.round(currentDistance)}m`);
        
        if (this.aerialImages.length > 0 && this.aerialImages[imageIndex]) {
            const aerialData = this.aerialImages[imageIndex];
            
            // „Äê„Éá„Éê„ÉÉ„Ç∞Ë°®Á§∫„ÄëÁîªÂÉèÁä∂ÊÖã
            const imgStatus = aerialData.image ? 
                `complete=${aerialData.image.complete}, size=${aerialData.image.naturalWidth}x${aerialData.image.naturalHeight}` :
                'image=null';
            this.showDebug(`ÁîªÂÉèÁä∂ÊÖã: ${imgStatus}`);
            
            if (aerialData.image && aerialData.image.complete && aerialData.image.naturalWidth > 0) {
                this.showDebug('‚úÖ ÁîªÂÉèÊúâÂäπ„ÄÅÊèèÁîªÈñãÂßã');
                
                // Êó¢Â≠ò„ÅÆÊèèÁîª„Ç≥„Éº„Éâ
                const scrollProgress = (progress * 2) % 1;
                const scrollOffset = scrollProgress * this.canvasHeight;
                
                const imgWidth = this.canvasWidth * 2.5;
                const imgHeight = this.canvasHeight * 2.5;
                const imgX = (this.canvasWidth - imgWidth) / 2;
                
                const imgY1 = scrollOffset;
                this.ctx.drawImage(
                    aerialData.image,
                    imgX, imgY1,
                    imgWidth, imgHeight
                );
                
                const imgY2 = imgY1 + imgHeight;
                this.ctx.drawImage(
                    aerialData.image,
                    imgX, imgY2,
                    imgWidth, imgHeight
                );
                
                this.showDebug(`‚úÖ ÊèèÁîªÂÆå‰∫Ü: ${imgWidth}x${imgHeight} at (${imgX},${imgY1})`);
                
            } else {
                this.showDebug('‚ö†Ô∏è ÁîªÂÉèÁÑ°Âäπ„ÄÅ„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ‰ΩøÁî®');
                this.drawFallbackBackground();
            }
        } else {
            this.showDebug('‚ö†Ô∏è ÈÖçÂàó„ÅåÁ©∫„Åæ„Åü„ÅØ„Ç§„É≥„Éá„ÉÉ„ÇØ„ÇπÁØÑÂõ≤Â§ñ');
            this.drawFallbackBackground();
        }
        
    } catch (error) {
        this.showDebug(`‚ùå ÊèèÁîª„Ç®„É©„Éº: ${error.message}`);
        this.drawFallbackBackground();
    }
}
    
    // Canvas‰∏ä„Åß„ÅÆ„Éú„Éº„É´ÊèèÁîªÔºàÊîπÂñÑÁâàÔºâ
    drawCanvasBall(progress) {
        if (!this.ctx) return;
        
        try {
            let scale;
            if (progress <= 0.5) {
                scale = 1 + progress * 3;
            } else {
                scale = 4 - (progress - 0.5) * 3;
            }
            scale = Math.max(0.5, Math.min(4, scale));
            
            const ballRadius = 30 * scale;
            
            // „Éú„Éº„É´„ÅÆÂΩ±
            this.ctx.save();
            this.ctx.globalAlpha = 0.3;
            this.ctx.fillStyle = '#000';
            this.ctx.beginPath();
            this.ctx.arc(
                this.ballCanvasX + 5,
                this.ballCanvasY + 5,
                ballRadius * 0.8,
                0, 2 * Math.PI
            );
            this.ctx.fill();
            this.ctx.restore();
            
            // „Éú„Éº„É´ÁîªÂÉèÊèèÁîª
            if (this.ballImage && this.ballImage.complete && this.ballImage.naturalWidth > 0) {
                try {
                    const ballSize = ballRadius * 2;
                    
                    this.ctx.save();
                    
                    this.ctx.translate(this.ballCanvasX, this.ballCanvasY);
                    this.ctx.rotate((progress * 360 * 4) * Math.PI / 180);
                    
                    this.ctx.drawImage(
                        this.ballImage,
                        -ballSize / 2,
                        -ballSize / 2,
                        ballSize,
                        ballSize
                    );
                    
                    this.ctx.restore();
                    
                    console.log(`üèÄ „Éú„Éº„É´ÁîªÂÉèÊèèÁîªÊàêÂäü („Çπ„Ç±„Éº„É´: ${scale.toFixed(2)}x)`);
                    
                } catch (error) {
                    console.error('‚ùå „Éú„Éº„É´ÁîªÂÉèÊèèÁîª„Ç®„É©„Éº:', error);
                    this.drawFallbackBall(ballRadius);
                }
            } else {
                console.log('üü† „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ„Éú„Éº„É´ÊèèÁîª');
                this.drawFallbackBall(ballRadius);
            }
            
        } catch (error) {
            console.error('‚ùå „Éú„Éº„É´ÊèèÁîªÂÖ®Ëà¨„Ç®„É©„Éº:', error);
        }
    }
    
    // „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ„Éú„Éº„É´ÊèèÁîª
    drawFallbackBall(ballRadius) {
        if (!this.ctx) return;
        
        try {
            const gradient = this.ctx.createRadialGradient(
                this.ballCanvasX - ballRadius * 0.3,
                this.ballCanvasY - ballRadius * 0.3,
                0,
                this.ballCanvasX,
                this.ballCanvasY,
                ballRadius
            );
            gradient.addColorStop(0, '#ff8a65');
            gradient.addColorStop(0.7, '#ff5722');
            gradient.addColorStop(1, '#d84315');
            
            this.ctx.fillStyle = gradient;
            this.ctx.beginPath();
            this.ctx.arc(this.ballCanvasX, this.ballCanvasY, ballRadius, 0, 2 * Math.PI);
            this.ctx.fill();
            
            this.ctx.fillStyle = '#ffccbc';
            this.ctx.beginPath();
            this.ctx.arc(
                this.ballCanvasX - ballRadius * 0.3,
                this.ballCanvasY - ballRadius * 0.3,
                ballRadius * 0.2,
                0, 2 * Math.PI
            );
            this.ctx.fill();
            
            this.ctx.strokeStyle = '#bf360c';
            this.ctx.lineWidth = 2;
            this.ctx.beginPath();
            this.ctx.arc(this.ballCanvasX, this.ballCanvasY, ballRadius, 0, 2 * Math.PI);
            this.ctx.stroke();
            
        } catch (error) {
            console.error('‚ùå „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ„Éú„Éº„É´ÊèèÁîª„Ç®„É©„Éº:', error);
        }
    }
    
    // „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØËÉåÊôØÊèèÁîªÔºàÊîπÂñÑÁâàÔºâ
    drawFallbackBackground() {
        if (!this.ctx) return;
        
        try {
            const gradient = this.ctx.createLinearGradient(
                0, 0, 
                this.canvasWidth, this.canvasHeight
            );
            
            const phase = (this.backgroundOffsetY / 100) % 1;
            gradient.addColorStop(0, `hsl(${120 + phase * 60}, 60%, 40%)`);
            gradient.addColorStop(0.5, `hsl(${90 + phase * 60}, 50%, 35%)`);
            gradient.addColorStop(1, `hsl(${60 + phase * 60}, 40%, 30%)`);
            
            this.ctx.fillStyle = gradient;
            this.ctx.fillRect(0, 0, this.canvasWidth, this.canvasHeight);
            
            this.ctx.fillStyle = 'rgba(255, 255, 255, 0.1)';
            for (let i = 0; i < 20; i++) {
                const x = (i * 50) % this.canvasWidth;
                const y = (i * 30 + this.backgroundOffsetY) % (this.canvasHeight + 100);
                this.ctx.fillRect(x, y, 2, 2);
            }
            
            this.ctx.fillStyle = 'rgba(255, 255, 255, 0.3)';
            this.ctx.font = '24px Arial';
            this.ctx.textAlign = 'center';
            const textY = (this.backgroundOffsetY / 2) % (this.canvasHeight + 100);
            this.ctx.fillText('„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØËÉåÊôØ', this.canvasWidth / 2, textY);
            
        } catch (error) {
            console.error('‚ùå „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØËÉåÊôØÊèèÁîª„Ç®„É©„Éº:', error);
        }
    }
    
    clearTrails() {
        const trails = document.querySelectorAll('.ball-trail');
        trails.forEach(trail => trail.remove());
    }
    
    createTrail(x, y) {
        const trail = document.createElement('div');
        trail.className = 'ball-trail';
        trail.style.left = x + 'px';
        trail.style.top = y + 'px';
        document.body.appendChild(trail);
        
        setTimeout(() => {
            if (trail.parentNode) {
                trail.parentNode.removeChild(trail);
            }
        }, 2000);
    }
    
    async landBall() {
        this.isActive = false;
        this.isBallMoving = false;
        
        console.log('üéØ ÁùÄÂú∞Âá¶ÁêÜÈñãÂßã');
        
        this.gameCanvas.style.display = 'none';
        this.mapElement.style.display = 'block';
        this.ballElement.style.display = 'block';
        
        this.playSound('goal');
        
        this.ballElement.classList.remove('throwing', 'flying');
        this.ballElement.style.transform = 'translate(-50%, -50%) scale(1)';
        
        const finalDistance = Math.round(this.calculateDistance(
            this.startPosition.lat, this.startPosition.lng,
            this.ballPosition.lat, this.ballPosition.lng
        ));
        
        console.log('‚úÖ ÊúÄÁµÇË∑ùÈõ¢:', finalDistance + 'm');
        
        if (this.map) {
            try {
                this.map.setCenter(this.ballPosition);
                
                let currentZoom = this.map.getZoom() || 10;
                const targetZoom = 19;
                const zoomSteps = 30;
                const zoomIncrement = (targetZoom - currentZoom) / zoomSteps;
                
                let step = 0;
                const zoomInterval = setInterval(() => {
                    step++;
                    currentZoom += zoomIncrement;
                    
                    if (step >= zoomSteps) {
                        currentZoom = targetZoom;
                        clearInterval(zoomInterval);
                    }
                    
                    this.map.setZoom(Math.round(currentZoom));
                }, 100);
                
                setTimeout(() => {
                    this.map.setHeading(0);
                }, 3000);
                
            } catch (e) {
                console.warn('‚ùå ÁùÄÂú∞ÊôÇÂú∞Âõ≥Êõ¥Êñ∞„Ç®„É©„Éº:', e);
            }
        }
        
        document.getElementById('distance').textContent = finalDistance + 'm';
        
        setTimeout(() => {
            this.clearTrails();
        }, 3000);
        
        this.updateStatus(`üéØ ÁùÄÂú∞ÂÆå‰∫ÜÔºÅÈ£õË∑ùÈõ¢: ${finalDistance}m ÊñπÂêë: ${this.getCompassDirection(this.throwAngle)}`);
        
        setTimeout(() => {
            this.showLandingPanel(finalDistance, this.ballPosition);
        }, 4000);
    }
    
    showLandingPanel(distance, position) {
        document.getElementById('infoPanel').style.display = 'none';
        
        const landingPanel = document.getElementById('landingPanel');
        const results = document.getElementById('results');
        const googleMapBtn = document.getElementById('googleMapBtn');
        const resetBtn = document.getElementById('resetBtn');
        
        results.innerHTML = `üéØ ÁùÄÂú∞ÂÆå‰∫ÜÔºÅ<br>È£õË∑ùÈõ¢: ${distance}m`;
        
        const googleMapUrl = `https://www.google.com/maps?q=${position.lat},${position.lng}&z=18&t=k`;
        googleMapBtn.href = googleMapUrl;
        
        resetBtn.onclick = () => this.reset();
        
        landingPanel.style.display = 'block';
    }
    
    updateStatus(message) {
        document.getElementById('status').textContent = message;
    }
    
    // Èü≥Â£∞ÂÜçÁîüÔºàÊîπÂñÑÁâàÔºâ
    playSound(soundName) {
        console.log(`üîä Èü≥Â£∞ÂÜçÁîüË©¶Ë°å: ${soundName}`);
        if (this.sounds[soundName]) {
            try {
                const audio = this.sounds[soundName];
                
                audio.currentTime = 0;
                audio.volume = 1.0;
                
                const playPromise = audio.play();
                
                if (playPromise !== undefined) {
                    playPromise
                        .then(() => {
                            console.log(`‚úÖ ${soundName} Èü≥Â£∞ÂÜçÁîüÊàêÂäü`);
                        })
                        .catch(error => {
                            console.error(`‚ùå ${soundName} Èü≥Â£∞ÂÜçÁîüÂ§±Êïó:`, error);
                            
                            try {
                                const fallbackAudio = new Audio(audio.src);
                                fallbackAudio.volume = 1.0;
                                fallbackAudio.play()
                                    .then(() => console.log(`‚úÖ ${soundName} „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØÂÜçÁîüÊàêÂäü`))
                                    .catch(e => console.log(`‚ö†Ô∏è ${soundName} „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ„ÇÇÂ§±Êïó:`, e));
                            } catch (e) {
                                console.log(`‚ö†Ô∏è ${soundName} „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ‰ΩúÊàêÂ§±Êïó:`, e);
                            }
                        });
                }
            } catch (e) {
                console.error(`‚ùå ${soundName} Èü≥Â£∞„Ç®„É©„Éº:`, e);
            }
        } else {
            console.warn(`‚ùå Èü≥Â£∞ ${soundName} „ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì`);
        }
    }
    
    reset() {
        console.log('üîÑ „É™„Çª„ÉÉ„ÉàÈñãÂßã');
        
        if (this.countdownTimer) {
            clearInterval(this.countdownTimer);
            this.countdownTimer = null;
        }
        if (this.preparationTimer) {
            clearInterval(this.preparationTimer);
            this.preparationTimer = null;
        }
        
        this.hideCountdown();
        this.hideResourcePreparation();
        
        this.isActive = false;
        this.isCountdownActive = false;
        this.isBallMoving = false;
        this.isDetectingShake = false;
        
        this.accelerationData = [];
        this.maxAcceleration = 0;
        this.totalDistance = 0;
        
        this.backgroundOffsetY = 0;
        this.aerialImages = [];

        // ‰øÆÊ≠£: „É™„Çª„ÉÉ„ÉàÊôÇ„Å´Ê∫ñÂÇôÁä∂ÊÖã„ÇÇ„É™„Çª„ÉÉ„ÉàÔºàËøΩÂä†Ôºâ
        this.isAudioReady = false;
        this.isAerialImagesReady = false;
        this.isBallImageReady = false;
        
        if (this.gameCanvas) {
            this.gameCanvas.style.display = 'none';
        }
        if (this.mapElement) {
            this.mapElement.style.display = 'block';
        }
        
        this.ballElement.style.display = 'block';
        this.ballElement.classList.remove('throwing', 'flying');
        this.ballElement.style.transform = 'translate(-50%, -50%) scale(1)';
        
        
        document.getElementById('powerMeter').style.display = 'none';
        document.getElementById('powerFill').style.height = '0%';
        
        this.clearTrails();
        
        this.ballPosition = { ...this.startPosition };

        // „Éú„Éº„É´ÁîªÂÉè„ÇíÂÜçË™≠„ÅøËæº„ÅøÔºà„É™„Çª„ÉÉ„ÉàÊôÇÔºâÔºàÊñ∞„Åó„ÅÑ‰ΩçÁΩÆ„Å´ËøΩÂä†Ôºâ
        this.loadBallImage();
        
        if (this.isMapReady) {
            this.mapElement.style.transform = `rotate(${-this.heading}deg)`;
        }
        
        if (this.map && this.startPosition) {
            try {
                this.map.setCenter(this.startPosition);
                this.map.setZoom(20);
                this.map.setMapTypeId(google.maps.MapTypeId.SATELLITE);
                this.map.setHeading(0);
            } catch (e) {
                console.warn('‚ùå Âú∞Âõ≥„É™„Çª„ÉÉ„Éà„Ç®„É©„Éº:', e);
            }
        }
        
        document.getElementById('landingPanel').style.display = 'none';
        document.getElementById('infoPanel').style.display = 'block';
        
        document.getElementById('distance').textContent = '0m';
        document.getElementById('speed').textContent = '---';
        
        this.updateCoordinatesDisplay();
        this.updateStatus('üéØ ÊäïÁêÉÊ∫ñÂÇôÂÆå‰∫ÜÔºÅ„Çπ„Çø„Éº„Éà„Éú„Çø„É≥„ÇíÊäº„Åó„Å¶„Åè„Å†„Åï„ÅÑ');
        
        const startBtn = document.getElementById('startBtn');
        startBtn.textContent = 'üöÄ „Çπ„Çø„Éº„Éà';
        startBtn.disabled = false;
        startBtn.classList.add('countdown-ready');
        startBtn.onclick = () => this.startCountdown();
    }
    
    showError(message) {
        const errorDiv = document.createElement('div');
        errorDiv.className = 'error-message';
        errorDiv.innerHTML = `
            <div style="font-size: 20px; margin-bottom: 15px;">‚ö†Ô∏è</div>
            <strong>„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü</strong><br><br>
            ${message}<br><br>
            <button onclick="location.reload()" style="
                padding: 12px 20px; 
                background: white; 
                color: #d32f2f; 
                border: 2px solid #d32f2f; 
                border-radius: 8px; 
                cursor: pointer;
                font-weight: bold;
            ">
                üîÑ ÂÜçË™≠„ÅøËæº„Åø
            </button>
        `;
        document.body.appendChild(errorDiv);
        
        setTimeout(() => {
            if (errorDiv.parentNode) {
                errorDiv.parentNode.removeChild(errorDiv);
            }
        }, 10000);
    }
}

// Global app instance
let app = null;

// Initialize app when DOM is ready
document.addEventListener('DOMContentLoaded', function() {
    console.log('üöÄ DOM loaded, creating app instance...');
    app = new BallThrowJourneyApp();
    console.log('‚úÖ App instance created:', app);
});

// Global function for button clicks
function startApp() {
    console.log('üöÄ startApp called');
    if (app && typeof app.startApp === 'function') {
        app.startApp();
    } else {
        console.error('‚ùå App not ready');
        if (!app) {
            app = new BallThrowJourneyApp();
            setTimeout(() => {
                if (app.startApp) {
                    app.startApp();
                }
            }, 500);
        }
    }
}

// Set up button event listener when page loads
window.addEventListener('load', function() {
    const startBtn = document.getElementById('startBtn');
    if (startBtn) {
        console.log('üéÆ Setting up start button...');
        
        startBtn.onclick = null;
        startBtn.removeAttribute('onclick');
        
        startBtn.addEventListener('click', function(e) {
            e.preventDefault();
            console.log('üéØ Start button clicked');
            
            // Enable audio context on first user interaction
            if (app && app.sounds) {
                Object.values(app.sounds).forEach(audio => {
                    audio.load();
                });
            }
            
            startApp();
        });
        
        console.log('‚úÖ Start button event listener added');
    } else {
        console.error('‚ùå Start button not found');
    }
});

// Prevent zoom on double tap (iOS Safari)
document.addEventListener('touchstart', function(event) {
    if (event.touches.length > 1) {
        event.preventDefault();
    }
}, { passive: false });

let lastTouchEnd = 0;
document.addEventListener('touchend', function(event) {
    const now = (new Date()).getTime();
    if (now - lastTouchEnd <= 300) {
        event.preventDefault();
    }
    lastTouchEnd = now;
}, { passive: false });